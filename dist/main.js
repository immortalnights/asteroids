(()=>{"use strict";var t,e={913:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(541),s=i(147),o=i(841),a=i(934),r=i(231),h=function(){function t(t){this.scene=new s.default(t),this.ship=void 0,this.background=void 0,this.rocks=[],this.bullets=[],this.particals=[]}return t.prototype.resize=function(){var t=this.scene.canvas.getBoundingClientRect();this.scene.canvas.width=t.width,this.scene.canvas.height=t.height},t.prototype.play=function(){this.ship=new o.default(this.scene,this.scene.width/2,this.scene.height/2,10),this.background=new a.default(this.scene),this.scene.add(this.background);for(var t=0;t<0;t++){var e=new n.default(this.scene,r.default.between(0,this.scene.width),r.default.between(0,this.scene.height));this.scene.add(e)}this.scene.add(this.ship),this.ship.angle=-150,this.ship.setVelocity(500),this.scene.play()},t.prototype.stop=function(){this.scene.stop()},t}();e.default=h},490:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Angle=e.wrap=e.clamp=void 0,e.clamp=function(t,e,i){return t<e&&(t=e),t>i&&(t=i),t},e.wrap=function(t,e,i){return t<e&&(t=i+t%i),t>i&&(t=e+t%i),t},e.Angle={between:function(t,e){return Math.atan2(e.y-t.y,e.x-t.x)*(180/Math.PI)}},e.default={clamp:e.clamp,wrap:e.wrap,Angle:e.Angle}},231:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.pick=e.floatBetween=e.between=void 0,e.between=function(t,i){return Math.floor((0,e.floatBetween)(t,i))},e.floatBetween=function(t,e){return Math.random()*e+t},e.pick=function(t){return t[(0,e.between)(0,t.length)]},e.default={between:e.between,floatBetween:e.floatBetween,pick:e.pick}},541:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(993),s=i(490),o=i(231),a=function(){function t(t,e,i){this.scene=t,this.position=new n.default(e,i),this.size=28,this.angle=0,this.rotationSpeed=o.default.floatBetween(.1,2),this.velocity=new n.default(o.default.between(-200,200),o.default.between(-200,200)),this.points=function(t,e,i,s){void 0===i&&(i=20),void 0===s&&(s=8);var a=function(t,e,i,s){for(var o=6.28/t,a=0,r=[],h=0;h<t;h++){var c=new n.default(0+s*Math.cos(a),0+s*Math.sin(a));r.push(c),a+=o}return r}(s,0,0,i);return a.forEach((function(t){t.x+=o.default.between(-.25*i,.25*i)+i,t.y+=o.default.between(-.25*i,.25*i)+i})),a}(0,0,this.size,8)}return Object.defineProperty(t.prototype,"radians",{get:function(){return this.angle*Math.PI/180},enumerable:!1,configurable:!0}),t.prototype.update=function(t){var e=this.velocity.clone().multiply(t,t);this.position.add(e),this.position.x=s.default.wrap(this.position.x,-2*this.size,this.scene.width+2*this.size),this.position.y=s.default.wrap(this.position.y,-2*this.size,this.scene.height+2*this.size),this.angle+=this.rotationSpeed},t.prototype.render=function(t){t.save(),t.strokeStyle="#aaaaaa",t.fillStyle="#333333",t.translate(this.position.x-this.size/2,this.position.y-this.size/2),t.rotate(this.radians),t.beginPath(),t.moveTo(this.points[0].x,this.points[0].y);for(var e=1;e<this.points.length;e++){var i=this.points[e];t.lineTo(i.x,i.y)}t.closePath(),t.stroke(),t.fill(),t.setTransform(1,0,0,1,0,0),t.restore()},t}();e.default=a},147:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(841),s=i(490),o=function(){function t(t){this.canvas=t,this.context=t.getContext("2d"),this.pointer={x:0,y:0,in:!1},this.gameObjects=[],this.animationFrameId=0,this.lastFrameTime=0}return Object.defineProperty(t.prototype,"width",{get:function(){return this.canvas.width},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return this.canvas.height},enumerable:!1,configurable:!0}),t.prototype.add=function(t){this.gameObjects.push(t)},t.prototype.play=function(){var t=this;this.canvas.addEventListener("mouseenter",(function(e){t.pointer.in=!0})),this.canvas.addEventListener("mouseleave",(function(e){t.pointer.in=!1})),this.canvas.addEventListener("mousemove",(function(e){var i=t.canvas.getBoundingClientRect(),n=t.canvas.width/i.width,s=t.canvas.height/i.height;t.pointer.x=(e.clientX-i.left)*n,t.pointer.y=(e.clientY-i.top)*s})),this.frame()},t.prototype.stop=function(){window.cancelAnimationFrame(this.animationFrameId)},t.prototype.frame=function(){var t=this;this.animationFrameId=window.requestAnimationFrame((function(e){t.update(e),t.render(e)}))},t.prototype.update=function(t){var e=this.gameObjects.find((function(t){return t instanceof n.default}));if(this.pointer.in){var i=s.default.Angle.between(e.position,this.pointer);e.angle>i?e.angle-=1:e.angle<i&&(e.angle+=1)}},t.prototype.render=function(t){var e=this,i=this.context;i.clearRect(0,0,this.canvas.width,this.canvas.height);var n=t-this.lastFrameTime;this.lastFrameTime=t,this.gameObjects.forEach((function(t){t.update(n/1e3),t.render(e.context)})),i.fillStyle="#ffffff",i.fillText("".concat(this.pointer.x,", ").concat(this.pointer.y),10,10),this.frame()},t}();e.default=o},841:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(993),s=i(490),o=function(){function t(t,e,i,s){this.scene=t,this.position=new n.default(e,i),this.velocity=new n.default(0,0),this.size=s,this._angle=0,this._speed=0}return Object.defineProperty(t.prototype,"speed",{get:function(){return this._speed},set:function(t){this._speed=s.default.clamp(t,0,1e3)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"angle",{get:function(){return this._angle},set:function(t){this._angle=t,this.velocity.setToPolar(this.radians,this.speed)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"radians",{get:function(){return this.angle*Math.PI/180},enumerable:!1,configurable:!0}),t.prototype.setVelocity=function(t){this.speed=t,this.velocity.setToPolar(this.radians,this.speed)},t.prototype.update=function(t){var e=this.velocity.clone().multiply(t,t);this.position.add(e),this.position.x=s.default.wrap(this.position.x,-2*this.size,this.scene.canvas.width+2*this.size),this.position.y=s.default.wrap(this.position.y,-2*this.size,this.scene.canvas.height+2*this.size)},t.prototype.render=function(t){var e=[new n.default(this.size,0),new n.default(-this.size/2,this.size/2),new n.default(-this.size/2,-this.size/2)];t.save(),t.strokeStyle="#aaaaaa",t.fillStyle="#999999",t.translate(this.position.x-this.size/2,this.position.y-this.size/2),t.rotate(this.radians),t.beginPath(),t.moveTo(e[0].x,e[0].y),t.lineTo(e[1].x,e[1].y),t.lineTo(e[2].x,e[2].y),t.closePath(),t.stroke(),t.fill(),t.setTransform(1,0,0,1,0,0),t.restore()},t}();e.default=o},934:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(231),s=function(){function t(t){this.scene=t,this.stars=[];for(var e=0;e<300;e++){var i=n.default.between(1,2),s=n.default.floatBetween(.1,1),o=n.default.between(0,t.width),a=n.default.between(0,t.height),r=n.default.pick(["255, 255, 255","128, 0, 128","34, 34, 153"]);this.stars.push({x:o,y:a,size:i,color:r,alpha:s})}}return t.prototype.update=function(t){},t.prototype.render=function(){var t=this.scene.context;t.save(),this.stars.forEach((function(e){t.fillStyle="rgba(".concat(e.color,", ").concat(e.alpha,")"),t.fillRect(e.x,e.y,e.size,e.size)})),t.restore()},t}();e.default=s},993:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){void 0===t&&(t=0),void 0===e&&(e=0),this.x=t,this.y=e}return t.prototype.clone=function(){return new t(this.x,this.y)},t.prototype.set=function(t,e){this.x=t,this.y=e},t.prototype.add=function(t,e){return void 0===e&&(e=void 0),void 0===e&&(e=t.y,t=t.x),this.x+=t,this.y+=e,this},t.prototype.multiply=function(t,e){return void 0===e&&(e=void 0),void 0===e&&(e=t.y,t=t.x),this.x*=t,this.y*=e,this},t.prototype.setToPolar=function(t,e){return void 0===e&&(e=1),this.x=Math.cos(t)*e,this.y=Math.sin(t)*e,this},t}();e.default=i}},i={};t=function t(n){var s=i[n];if(void 0!==s)return s.exports;var o=i[n]={exports:{}};return e[n](o,o.exports,t),o.exports}(913),document.addEventListener("DOMContentLoaded",(function(){var e=document.getElementsByTagName("canvas")[0],i=new t.default(e);i.resize(),i.play(),window.addEventListener("resize",(function(){console.log("resize"),i.resize()}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Li9zcmMvYXN0ZXJvaWRzLnRzIiwid2VicGFjazovL2FzdGVyb2lkcy8uL3NyYy9tYXRoLnRzIiwid2VicGFjazovL2FzdGVyb2lkcy8uL3NyYy9ybmQudHMiLCJ3ZWJwYWNrOi8vYXN0ZXJvaWRzLy4vc3JjL3JvY2sudHMiLCJ3ZWJwYWNrOi8vYXN0ZXJvaWRzLy4vc3JjL3NjZW5lLnRzIiwid2VicGFjazovL2FzdGVyb2lkcy8uL3NyYy9zaGlwLnRzIiwid2VicGFjazovL2FzdGVyb2lkcy8uL3NyYy9zdGFyYmFja2dyb3VuZC50cyIsIndlYnBhY2s6Ly9hc3Rlcm9pZHMvLi9zcmMvdmVjdG9yMmQudHMiLCJ3ZWJwYWNrOi8vYXN0ZXJvaWRzL3dlYnBhY2svYm9vdHN0cmFwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBBc3Rlcm9pZHMgZnJvbSAnLi9hc3Rlcm9pZHMnXHJcblxyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgZnVuY3Rpb24oKSB7XHJcbiAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2NhbnZhcycpWzBdIGFzIEhUTUxDYW52YXNFbGVtZW50XHJcbiAgY29uc3QgYXN0ZXJvaWRzID0gbmV3IEFzdGVyb2lkcyhjYW52YXMpXHJcbiAgYXN0ZXJvaWRzLnJlc2l6ZSgpXHJcbiAgYXN0ZXJvaWRzLnBsYXkoKVxyXG5cclxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgKCkgPT4ge1xyXG4gICAgY29uc29sZS5sb2coXCJyZXNpemVcIilcclxuICAgIGFzdGVyb2lkcy5yZXNpemUoKVxyXG4gIH0pXHJcbn0pIiwiXG5cbmNvbnN0IE1BWF9ST0NLX0NPVU5UOiBudW1iZXIgPSAwXG5cbmltcG9ydCBCdWxsZXQgZnJvbSAnLi9idWxsZXQnXG5pbXBvcnQgUGFydGljbGUgZnJvbSAnLi9wYXJ0aWNsZSdcbmltcG9ydCBSb2NrIGZyb20gJy4vcm9jaydcbmltcG9ydCBTY2VuZSBmcm9tICcuL3NjZW5lJ1xuaW1wb3J0IFNoaXAgZnJvbSAnLi9zaGlwJ1xuaW1wb3J0IFN0YXJCYWNrZ3JvdW5kIGZyb20gJy4vc3RhcmJhY2tncm91bmQnXG5pbXBvcnQgUk5EIGZyb20gJy4vcm5kJ1xuXG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFzdGVyb2lkc1xue1xuICBzY2VuZTogU2NlbmVcbiAgc2hpcDogU2hpcCB8IHVuZGVmaW5lZFxuICBiYWNrZ3JvdW5kOiBTdGFyQmFja2dyb3VuZCB8IHVuZGVmaW5lZFxuICByb2NrczogQXJyYXk8Um9jaz5cbiAgYnVsbGV0czogQXJyYXk8QnVsbGV0PlxuICBwYXJ0aWNhbHM6IEFycmF5PFBhcnRpY2xlPlxuXG4gIGNvbnN0cnVjdG9yKGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQpXG4gIHtcbiAgICB0aGlzLnNjZW5lID0gbmV3IFNjZW5lKGNhbnZhcylcbiAgICB0aGlzLnNoaXAgPSB1bmRlZmluZWRcbiAgICB0aGlzLmJhY2tncm91bmQgPSB1bmRlZmluZWRcbiAgICB0aGlzLnJvY2tzID0gW11cbiAgICB0aGlzLmJ1bGxldHMgPSBbXVxuICAgIHRoaXMucGFydGljYWxzID0gW11cbiAgfVxuXG4gIHJlc2l6ZSgpXG4gIHtcbiAgICAvLyB0aGlzLnNjZW5lLmNhbnZhcy53aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoXG4gICAgLy8gdGhpcy5zY2VuZS5jYW52YXMuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0XG5cbiAgICBjb25zdCBzaXplID0gdGhpcy5zY2VuZS5jYW52YXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcbiAgICAgIC8vIGNvbnN0IHJhdGlvID0gd2luZG93LmRldmljZVBpeGVsUmF0aW8gfHwgMVxuXG4gICAgdGhpcy5zY2VuZS5jYW52YXMud2lkdGggPSBzaXplLndpZHRoXG4gICAgdGhpcy5zY2VuZS5jYW52YXMuaGVpZ2h0ID0gc2l6ZS5oZWlnaHRcbiAgfVxuXG4gIHBsYXkoKVxuICB7XG4gICAgdGhpcy5zaGlwID0gbmV3IFNoaXAodGhpcy5zY2VuZSwgdGhpcy5zY2VuZS53aWR0aCAvIDIsIHRoaXMuc2NlbmUuaGVpZ2h0IC8gMiwgMTApXG4gICAgdGhpcy5iYWNrZ3JvdW5kID0gbmV3IFN0YXJCYWNrZ3JvdW5kKHRoaXMuc2NlbmUpXG5cbiAgICB0aGlzLnNjZW5lLmFkZCh0aGlzLmJhY2tncm91bmQpXG5cbiAgICAvLyBDcmVhdGUgcm9ja3NcbiAgICBmb3IgKGxldCBjb3VudDogbnVtYmVyID0gMDsgY291bnQgPCBNQVhfUk9DS19DT1VOVDsgY291bnQrKylcbiAgICB7XG4gICAgICBjb25zdCByb2NrOiBSb2NrID0gbmV3IFJvY2sodGhpcy5zY2VuZSwgUk5ELmJldHdlZW4oMCwgdGhpcy5zY2VuZS53aWR0aCksIFJORC5iZXR3ZWVuKDAsIHRoaXMuc2NlbmUuaGVpZ2h0KSlcbiAgICAgIHRoaXMuc2NlbmUuYWRkKHJvY2spXG4gICAgfVxuXG4gICAgdGhpcy5zY2VuZS5hZGQodGhpcy5zaGlwKVxuXG4gICAgdGhpcy5zaGlwLmFuZ2xlID0gLTE1MFxuICAgIHRoaXMuc2hpcC5zZXRWZWxvY2l0eSg1MDApXG5cbiAgICB0aGlzLnNjZW5lLnBsYXkoKVxuICB9XG5cbiAgc3RvcCgpXG4gIHtcbiAgICB0aGlzLnNjZW5lLnN0b3AoKVxuICB9XG59IiwiaW1wb3J0IHsgVmVjdG9yTGlrZSB9IGZyb20gJy4vdHlwZXMnXHJcblxyXG5leHBvcnQgY29uc3QgY2xhbXA6IEZ1bmN0aW9uID0gKHZhbHVlOiBudW1iZXIsIG1pbjogbnVtYmVyLCBtYXg6IG51bWJlcik6IG51bWJlciA9PiB7XHJcbiAgaWYgKHZhbHVlIDwgbWluKVxyXG4gIHtcclxuICAgIHZhbHVlID0gbWluXHJcbiAgfVxyXG5cclxuICBpZiAodmFsdWUgPiBtYXgpXHJcbiAge1xyXG4gICAgdmFsdWUgPSBtYXhcclxuICB9XHJcblxyXG4gIHJldHVybiB2YWx1ZVxyXG59XHJcblxyXG5leHBvcnQgY29uc3Qgd3JhcDogRnVuY3Rpb24gPSAodmFsdWU6IG51bWJlciwgbWluOiBudW1iZXIsIG1heDogbnVtYmVyKTogbnVtYmVyID0+IHtcclxuICBpZiAodmFsdWUgPCBtaW4pXHJcbiAge1xyXG4gICAgdmFsdWUgPSBtYXggKyAodmFsdWUgJSBtYXgpXHJcbiAgfVxyXG5cclxuICBpZiAodmFsdWUgPiBtYXgpXHJcbiAge1xyXG4gICAgdmFsdWUgPSBtaW4gKyAodmFsdWUgJSBtYXgpXHJcbiAgfVxyXG5cclxuICByZXR1cm4gdmFsdWVcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IEFuZ2xlID0ge1xyXG4gIC8qKlxyXG4gICAqIFxyXG4gICAqIEBwYXJhbSBhIFxyXG4gICAqIEBwYXJhbSBiIFxyXG4gICAqIEByZXR1cm5zIGFuZ2xlIGluIGRlZ3JlZXNcclxuICAgKi9cclxuICBiZXR3ZWVuKGE6IFZlY3Rvckxpa2UsIGI6IFZlY3Rvckxpa2UpOiBudW1iZXJcclxuICB7XHJcbiAgICByZXR1cm4gTWF0aC5hdGFuMihiLnkgLSBhLnksIGIueCAtIGEueCkgKiAoMTgwIC8gTWF0aC5QSSlcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICBjbGFtcCxcclxuICB3cmFwLFxyXG4gIEFuZ2xlXHJcbn0iLCJleHBvcnQgY29uc3QgYmV0d2VlbiA9IChtaW46IG51bWJlciwgbWF4OiBudW1iZXIpOiBudW1iZXIgPT4ge1xyXG4gIHJldHVybiBNYXRoLmZsb29yKGZsb2F0QmV0d2VlbihtaW4sIG1heCkpXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBmbG9hdEJldHdlZW4gPSAobWluOiBudW1iZXIsIG1heDogbnVtYmVyKTogbnVtYmVyID0+IHtcclxuICByZXR1cm4gKE1hdGgucmFuZG9tKCkgKiBtYXgpICsgbWluXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBwaWNrID0gKGNob2ljZXM6IEFycmF5PGFueT4pOiBhbnkgPT4ge1xyXG4gIGNvbnN0IGluZGV4ID0gYmV0d2VlbigwLCBjaG9pY2VzLmxlbmd0aClcclxuICByZXR1cm4gY2hvaWNlc1tpbmRleF1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIGJldHdlZW4sXHJcbiAgZmxvYXRCZXR3ZWVuLFxyXG4gIHBpY2tcclxufSIsImltcG9ydCBTY2VuZSBmcm9tICcuL3NjZW5lJ1xyXG5pbXBvcnQgVmVjdG9yMkQgZnJvbSAnLi92ZWN0b3IyZCdcclxuaW1wb3J0IE0gZnJvbSAnLi9tYXRoJ1xyXG5pbXBvcnQgUk5EIGZyb20gJy4vcm5kJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUm9ja1xyXG57XHJcbiAgc2NlbmU6IFNjZW5lXHJcbiAgc2l6ZTogbnVtYmVyXHJcbiAgcG9zaXRpb246IFZlY3RvcjJEXHJcbiAgYW5nbGU6IG51bWJlclxyXG4gIHJvdGF0aW9uU3BlZWQ6IG51bWJlclxyXG4gIHZlbG9jaXR5OiBWZWN0b3IyRFxyXG4gIHBvaW50czogQXJyYXk8VmVjdG9yMkQ+XHJcblxyXG4gIGNvbnN0cnVjdG9yKHNjZW5lOiBTY2VuZSwgeDogbnVtYmVyLCB5OiBudW1iZXIpXHJcbiAge1xyXG4gICAgY29uc3QgcG9pbnRzT25DaXJjbGUgPSAoY291bnQ6IG51bWJlciwgeDogbnVtYmVyLCB5OiBudW1iZXIsIHJhZGl1czogbnVtYmVyKTogQXJyYXk8VmVjdG9yMkQ+ID0+IHtcclxuICAgICAgY29uc3Qgc3RhcnRBbmdsZTogbnVtYmVyID0gMDtcclxuICAgICAgY29uc3QgZW5kQW5nbGU6IG51bWJlciA9IDYuMjg7XHJcblxyXG4gICAgICBjb25zdCBhbmdsZVN0ZXA6IG51bWJlciA9IChlbmRBbmdsZSAtIHN0YXJ0QW5nbGUpIC8gY291bnQ7XHJcbiAgICAgIGxldCBhbmdsZTogbnVtYmVyID0gc3RhcnRBbmdsZTtcclxuXHJcbiAgICAgIGNvbnN0IHBvaW50czogQXJyYXk8VmVjdG9yMkQ+ID0gW11cclxuICAgICAgZm9yIChsZXQgaTogbnVtYmVyID0gMDsgaSA8IGNvdW50OyBpKyspXHJcbiAgICAgIHtcclxuICAgICAgICBjb25zdCBwb2ludCA9IG5ldyBWZWN0b3IyRChcclxuICAgICAgICAgIHggKyAocmFkaXVzICogTWF0aC5jb3MoYW5nbGUpKSxcclxuICAgICAgICAgIHkgKyAocmFkaXVzICogTWF0aC5zaW4oYW5nbGUpKVxyXG4gICAgICAgIClcclxuXHJcbiAgICAgICAgcG9pbnRzLnB1c2gocG9pbnQpXHJcbiAgICAgICAgYW5nbGUgKz0gYW5nbGVTdGVwO1xyXG4gICAgICB9XHJcbiAgXHJcbiAgICAgIHJldHVybiBwb2ludHM7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGNyZWF0ZVBvbHlnb25Qb2ludHMgPSAoeDogbnVtYmVyLCB5OiBudW1iZXIsIHI6IG51bWJlciA9IDIwLCB0b3RhbFBvaW50czogbnVtYmVyID0gOCk6IEFycmF5PFZlY3RvcjJEPiA9PiB7XHJcbiAgICAgIGNvbnN0IHBvaW50czogQXJyYXk8VmVjdG9yMkQ+ID0gcG9pbnRzT25DaXJjbGUodG90YWxQb2ludHMsIHgsIHksIHIpXHJcblxyXG4gICAgICBwb2ludHMuZm9yRWFjaChwb2ludCA9PiB7XHJcbiAgICAgICAgICBwb2ludC54ICs9IFJORC5iZXR3ZWVuKC0ociAqIDAuMjUpLCByICogMC4yNSkgKyByXHJcbiAgICAgICAgICBwb2ludC55ICs9IFJORC5iZXR3ZWVuKC0ociAqIDAuMjUpLCByICogMC4yNSkgKyByXHJcbiAgICAgIH0pXHJcblxyXG4gICAgICByZXR1cm4gcG9pbnRzXHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5zY2VuZSA9IHNjZW5lXHJcbiAgICB0aGlzLnBvc2l0aW9uID0gbmV3IFZlY3RvcjJEKHgsIHkpXHJcbiAgICB0aGlzLnNpemUgPSAyOFxyXG4gICAgdGhpcy5hbmdsZSA9IDBcclxuICAgIHRoaXMucm90YXRpb25TcGVlZCA9IFJORC5mbG9hdEJldHdlZW4oMC4xLCAyKVxyXG4gICAgdGhpcy52ZWxvY2l0eSA9IG5ldyBWZWN0b3IyRChSTkQuYmV0d2VlbigtMjAwLCAyMDApLCBSTkQuYmV0d2VlbigtMjAwLCAyMDApKVxyXG4gICAgdGhpcy5wb2ludHMgPSBjcmVhdGVQb2x5Z29uUG9pbnRzKDAsIDAsIHRoaXMuc2l6ZSwgOClcclxuICAgIC8vIGNvbnNvbGUubG9nKHRoaXMucG9pbnRzKVxyXG4gIH1cclxuXHJcbiAgZ2V0IHJhZGlhbnMoKTogbnVtYmVyXHJcbiAge1xyXG4gICAgcmV0dXJuIHRoaXMuYW5nbGUgKiBNYXRoLlBJIC8gMTgwXHJcbiAgfVxyXG5cclxuICB1cGRhdGUoZGVsdGE6IG51bWJlcilcclxuICB7XHJcbiAgICBjb25zdCBtb3ZlbWVudDogVmVjdG9yMkQgPSB0aGlzLnZlbG9jaXR5LmNsb25lKCkubXVsdGlwbHkoZGVsdGEsIGRlbHRhKVxyXG4gICAgdGhpcy5wb3NpdGlvbi5hZGQobW92ZW1lbnQpXHJcblxyXG4gICAgdGhpcy5wb3NpdGlvbi54ID0gTS53cmFwKHRoaXMucG9zaXRpb24ueCwgLSh0aGlzLnNpemUgKiAyKSwgdGhpcy5zY2VuZS53aWR0aCArICh0aGlzLnNpemUgKiAyKSlcclxuICAgIHRoaXMucG9zaXRpb24ueSA9IE0ud3JhcCh0aGlzLnBvc2l0aW9uLnksIC0odGhpcy5zaXplICogMiksIHRoaXMuc2NlbmUuaGVpZ2h0ICsgKHRoaXMuc2l6ZSAqIDIpKVxyXG5cclxuICAgIHRoaXMuYW5nbGUgKz0gdGhpcy5yb3RhdGlvblNwZWVkXHJcblxyXG4gICAgLy8gY29uc29sZS5sb2coYCR7dGhpcy5wb3NpdGlvbi54fSwgJHt0aGlzLnBvc2l0aW9uLnl9ICR7dGhpcy5hbmdsZX1gKVxyXG4gIH1cclxuXHJcbiAgcmVuZGVyKGNvbnRleHQ6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRClcclxuICB7XHJcbiAgICBjb250ZXh0LnNhdmUoKVxyXG4gICAgY29udGV4dC5zdHJva2VTdHlsZSA9ICcjYWFhYWFhJ1xyXG4gICAgY29udGV4dC5maWxsU3R5bGUgPSAnIzMzMzMzMydcclxuXHJcbiAgICBjb250ZXh0LnRyYW5zbGF0ZSh0aGlzLnBvc2l0aW9uLnggLSB0aGlzLnNpemUgLyAyLCB0aGlzLnBvc2l0aW9uLnkgLSB0aGlzLnNpemUgLyAyKVxyXG4gICAgY29udGV4dC5yb3RhdGUodGhpcy5yYWRpYW5zKVxyXG5cclxuICAgIGNvbnRleHQuYmVnaW5QYXRoKClcclxuICAgIGNvbnRleHQubW92ZVRvKHRoaXMucG9pbnRzWzBdLngsIHRoaXMucG9pbnRzWzBdLnkpXHJcblxyXG4gICAgZm9yIChsZXQgaW5kZXg6IG51bWJlciA9IDE7IGluZGV4IDwgdGhpcy5wb2ludHMubGVuZ3RoOyBpbmRleCsrKVxyXG4gICAge1xyXG4gICAgICBjb25zdCBwb2ludCA9IHRoaXMucG9pbnRzW2luZGV4XVxyXG4gICAgICBjb250ZXh0LmxpbmVUbyhwb2ludC54LCBwb2ludC55KVxyXG4gICAgfVxyXG4gICAgY29udGV4dC5jbG9zZVBhdGgoKVxyXG4gICAgY29udGV4dC5zdHJva2UoKVxyXG4gICAgY29udGV4dC5maWxsKClcclxuXHJcbiAgICBjb250ZXh0LnNldFRyYW5zZm9ybSgxLCAwLCAwLCAxLCAwLCAwKVxyXG5cclxuICAgIGNvbnRleHQucmVzdG9yZSgpXHJcbiAgfVxyXG59IiwiaW1wb3J0IHsgUG9pbnRlciB9IGZyb20gJy4vdHlwZXMnXHJcbmltcG9ydCBTaGlwIGZyb20gJy4vc2hpcCdcclxuaW1wb3J0IE0gZnJvbSAnLi9tYXRoJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2NlbmVcclxue1xyXG4gIGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnRcclxuICBjb250ZXh0OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQgfCBudWxsXHJcbiAgcG9pbnRlcjogUG9pbnRlclxyXG4gIGdhbWVPYmplY3RzOiBBcnJheTxhbnk+XHJcbiAgYW5pbWF0aW9uRnJhbWVJZDogbnVtYmVyXHJcbiAgbGFzdEZyYW1lVGltZTogbnVtYmVyXHJcblxyXG4gIGNvbnN0cnVjdG9yKGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQpXHJcbiAge1xyXG4gICAgdGhpcy5jYW52YXMgPSBjYW52YXNcclxuICAgIHRoaXMuY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpXHJcbiAgICB0aGlzLnBvaW50ZXIgPSB7IHg6IDAsIHk6IDAsIGluOiBmYWxzZSB9XHJcbiAgICB0aGlzLmdhbWVPYmplY3RzID0gW11cclxuICAgIHRoaXMuYW5pbWF0aW9uRnJhbWVJZCA9IDBcclxuICAgIHRoaXMubGFzdEZyYW1lVGltZSA9IDBcclxuICB9XHJcblxyXG4gIGdldCB3aWR0aCgpOiBudW1iZXJcclxuICB7XHJcbiAgICByZXR1cm4gdGhpcy5jYW52YXMud2lkdGhcclxuICB9XHJcblxyXG4gIGdldCBoZWlnaHQoKTogbnVtYmVyXHJcbiAge1xyXG4gICAgcmV0dXJuIHRoaXMuY2FudmFzLmhlaWdodFxyXG4gIH1cclxuXHJcbiAgYWRkKG9iajogb2JqZWN0KTogdm9pZFxyXG4gIHtcclxuICAgIHRoaXMuZ2FtZU9iamVjdHMucHVzaChvYmopXHJcbiAgfVxyXG5cclxuICBwbGF5KCk6IHZvaWRcclxuICB7XHJcbiAgICB0aGlzLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgZXZlbnQgPT4ge1xyXG4gICAgICB0aGlzLnBvaW50ZXIuaW4gPSB0cnVlXHJcbiAgICB9KVxyXG4gICAgdGhpcy5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIGV2ZW50ID0+IHtcclxuICAgICAgdGhpcy5wb2ludGVyLmluID0gZmFsc2VcclxuICAgIH0pXHJcbiAgICB0aGlzLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBldmVudCA9PiB7XHJcbiAgICAgIGNvbnN0IHJlY3QgPSB0aGlzLmNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxyXG4gICAgICBjb25zdCBzY2FsZVggPSB0aGlzLmNhbnZhcy53aWR0aCAvIHJlY3Qud2lkdGhcclxuICAgICAgY29uc3Qgc2NhbGVZID0gdGhpcy5jYW52YXMuaGVpZ2h0IC8gcmVjdC5oZWlnaHRcclxuXHJcbiAgICAgIHRoaXMucG9pbnRlci54ID0gKGV2ZW50LmNsaWVudFggLSByZWN0LmxlZnQpICogc2NhbGVYXHJcbiAgICAgIHRoaXMucG9pbnRlci55ID0gKGV2ZW50LmNsaWVudFkgLSByZWN0LnRvcCkgKiBzY2FsZVlcclxuICAgIH0pXHJcblxyXG4gICAgdGhpcy5mcmFtZSgpXHJcbiAgfVxyXG5cclxuICBzdG9wKCk6IHZvaWRcclxuICB7XHJcbiAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5hbmltYXRpb25GcmFtZUlkKVxyXG4gIH1cclxuXHJcbiAgZnJhbWUoKTogdm9pZFxyXG4gIHtcclxuICAgIHRoaXMuYW5pbWF0aW9uRnJhbWVJZCA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKHRpbWU6IG51bWJlcikgPT4ge1xyXG4gICAgICB0aGlzLnVwZGF0ZSh0aW1lKVxyXG4gICAgICB0aGlzLnJlbmRlcih0aW1lKVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIHVwZGF0ZSh0aW1lOiBudW1iZXIpXHJcbiAge1xyXG4gICAgLy8gVHVybiBzaGlwIHRvd2FyZHMgdGhlIHBvaW50ZXIgbG9jYXRpb25cclxuICAgIGNvbnN0IHNoaXAgPSB0aGlzLmdhbWVPYmplY3RzLmZpbmQob2JqID0+IG9iaiBpbnN0YW5jZW9mIFNoaXApXHJcblxyXG4gICAgaWYgKHRoaXMucG9pbnRlci5pbilcclxuICAgIHtcclxuICAgICAgY29uc3QgVFVSTl9TUEVFRDogbnVtYmVyID0gMVxyXG4gICAgICBsZXQgYW5nbGUgPSBNLkFuZ2xlLmJldHdlZW4oc2hpcC5wb3NpdGlvbiwgdGhpcy5wb2ludGVyKVxyXG4gICAgICAvLyBjb25zb2xlLmxvZyhzaGlwLmFuZ2xlLCBhbmdsZSlcclxuXHJcbiAgICAgIC8vIGFuZ2xlID0gKGFuZ2xlLCAwLCAzNjApXHJcblxyXG4gICAgICBpZiAoc2hpcC5hbmdsZSA+IGFuZ2xlKVxyXG4gICAgICB7XHJcbiAgICAgICAgc2hpcC5hbmdsZSAtPSBUVVJOX1NQRUVEXHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZiAoc2hpcC5hbmdsZSA8IGFuZ2xlKVxyXG4gICAgICB7XHJcbiAgICAgICAgc2hpcC5hbmdsZSArPSBUVVJOX1NQRUVEXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlbmRlcih0aW1lOiBudW1iZXIpOiB2b2lkXHJcbiAge1xyXG4gICAgY29uc3QgY29udGV4dCA9IHRoaXMuY29udGV4dCBhcyBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkRcclxuICAgIGNvbnRleHQuY2xlYXJSZWN0KDAsIDAsIHRoaXMuY2FudmFzLndpZHRoLCB0aGlzLmNhbnZhcy5oZWlnaHQpXHJcblxyXG4gICAgY29uc3QgZGVsdGEgPSB0aW1lIC0gdGhpcy5sYXN0RnJhbWVUaW1lXHJcbiAgICB0aGlzLmxhc3RGcmFtZVRpbWUgPSB0aW1lXHJcblxyXG4gICAgdGhpcy5nYW1lT2JqZWN0cy5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICBpdGVtLnVwZGF0ZShkZWx0YSAvIDEwMDApXHJcbiAgICAgIGl0ZW0ucmVuZGVyKHRoaXMuY29udGV4dClcclxuICAgIH0pXHJcblxyXG4gICAgY29udGV4dC5maWxsU3R5bGUgPSAnI2ZmZmZmZidcclxuICAgIGNvbnRleHQuZmlsbFRleHQoYCR7dGhpcy5wb2ludGVyLnh9LCAke3RoaXMucG9pbnRlci55fWAsIDEwLCAxMClcclxuXHJcbiAgICB0aGlzLmZyYW1lKClcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IFNjZW5lIGZyb20gJy4vc2NlbmUnXHJcbmltcG9ydCBWZWN0b3IyRCBmcm9tICcuL3ZlY3RvcjJkJ1xyXG5pbXBvcnQgTSBmcm9tICcuL21hdGgnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaGlwXHJcbntcclxuICBzY2VuZTogU2NlbmVcclxuICBwb3NpdGlvbjogVmVjdG9yMkRcclxuICB2ZWxvY2l0eTogVmVjdG9yMkRcclxuICAvKiogQW5nbGUgaW4gZGVncmVlcyAqL1xyXG4gIF9hbmdsZTogbnVtYmVyXHJcbiAgX3NwZWVkOiBudW1iZXJcclxuICBzaXplOiBudW1iZXJcclxuXHJcbiAgY29uc3RydWN0b3Ioc2NlbmU6IFNjZW5lLCB4OiBudW1iZXIsIHk6IG51bWJlciwgc2l6ZTogbnVtYmVyKVxyXG4gIHtcclxuICAgIHRoaXMuc2NlbmUgPSBzY2VuZVxyXG4gICAgdGhpcy5wb3NpdGlvbiA9IG5ldyBWZWN0b3IyRCh4LCB5KVxyXG4gICAgdGhpcy52ZWxvY2l0eSA9IG5ldyBWZWN0b3IyRCgwLCAwKVxyXG4gICAgdGhpcy5zaXplID0gc2l6ZVxyXG4gICAgdGhpcy5fYW5nbGUgPSAwXHJcbiAgICB0aGlzLl9zcGVlZCA9IDBcclxuICB9XHJcblxyXG4gIGdldCBzcGVlZCgpOiBudW1iZXJcclxuICB7XHJcbiAgICByZXR1cm4gdGhpcy5fc3BlZWRcclxuICB9XHJcblxyXG4gIHNldCBzcGVlZChzcGVlZDogbnVtYmVyKVxyXG4gIHtcclxuICAgIHRoaXMuX3NwZWVkID0gTS5jbGFtcChzcGVlZCwgMCwgMTAwMClcclxuICB9XHJcblxyXG4gIGdldCBhbmdsZSgpOiBudW1iZXJcclxuICB7XHJcbiAgICByZXR1cm4gdGhpcy5fYW5nbGVcclxuICB9XHJcblxyXG4gIHNldCBhbmdsZShhbmdsZTogbnVtYmVyKVxyXG4gIHtcclxuICAgIHRoaXMuX2FuZ2xlID0gYW5nbGUgLy8gd3JhcChhbmdsZSwgMCwgMzYwKVxyXG5cclxuICAgIC8vIGZpeCBtZVxyXG4gICAgdGhpcy52ZWxvY2l0eS5zZXRUb1BvbGFyKHRoaXMucmFkaWFucywgdGhpcy5zcGVlZClcclxuICB9XHJcblxyXG4gIGdldCByYWRpYW5zKCk6IG51bWJlclxyXG4gIHtcclxuICAgIHJldHVybiB0aGlzLmFuZ2xlICogTWF0aC5QSSAvIDE4MFxyXG4gIH1cclxuXHJcbiAgc2V0VmVsb2NpdHkoc3BlZWQ6IG51bWJlcilcclxuICB7XHJcbiAgICB0aGlzLnNwZWVkID0gc3BlZWRcclxuICAgIHRoaXMudmVsb2NpdHkuc2V0VG9Qb2xhcih0aGlzLnJhZGlhbnMsIHRoaXMuc3BlZWQpXHJcbiAgfVxyXG5cclxuICB1cGRhdGUoZGVsdGE6IG51bWJlcik6IHZvaWRcclxuICB7XHJcbiAgICBjb25zdCBtb3ZlbWVudDogVmVjdG9yMkQgPSB0aGlzLnZlbG9jaXR5LmNsb25lKCkubXVsdGlwbHkoZGVsdGEsIGRlbHRhKVxyXG4gICAgdGhpcy5wb3NpdGlvbi5hZGQobW92ZW1lbnQpXHJcblxyXG4gICAgdGhpcy5wb3NpdGlvbi54ID0gTS53cmFwKHRoaXMucG9zaXRpb24ueCwgLSh0aGlzLnNpemUgKiAyKSwgdGhpcy5zY2VuZS5jYW52YXMud2lkdGggKyAodGhpcy5zaXplICogMikpXHJcbiAgICB0aGlzLnBvc2l0aW9uLnkgPSBNLndyYXAodGhpcy5wb3NpdGlvbi55LCAtKHRoaXMuc2l6ZSAqIDIpLCB0aGlzLnNjZW5lLmNhbnZhcy5oZWlnaHQgKyAodGhpcy5zaXplICogMikpXHJcbiAgfVxyXG5cclxuICByZW5kZXIoY29udGV4dDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKTogdm9pZFxyXG4gIHtcclxuICAgIGNvbnN0IHBvaW50czogQXJyYXk8VmVjdG9yMkQ+ID0gW1xyXG4gICAgICBuZXcgVmVjdG9yMkQodGhpcy5zaXplLCAwKSxcclxuICAgICAgbmV3IFZlY3RvcjJEKC0odGhpcy5zaXplIC8gMiksIHRoaXMuc2l6ZSAvIDIpLFxyXG4gICAgICBuZXcgVmVjdG9yMkQoLSh0aGlzLnNpemUgLyAyKSwgLSh0aGlzLnNpemUgLyAyKSksXHJcbiAgICBdXHJcblxyXG4gICAgY29udGV4dC5zYXZlKClcclxuICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSAnI2FhYWFhYSdcclxuICAgIGNvbnRleHQuZmlsbFN0eWxlID0gJyM5OTk5OTknXHJcblxyXG4gICAgY29udGV4dC50cmFuc2xhdGUodGhpcy5wb3NpdGlvbi54IC0gdGhpcy5zaXplIC8gMiwgdGhpcy5wb3NpdGlvbi55IC0gdGhpcy5zaXplIC8gMilcclxuICAgIGNvbnRleHQucm90YXRlKHRoaXMucmFkaWFucylcclxuXHJcbiAgICBjb250ZXh0LmJlZ2luUGF0aCgpXHJcbiAgICBjb250ZXh0Lm1vdmVUbyhwb2ludHNbMF0ueCwgcG9pbnRzWzBdLnkpXHJcbiAgICBjb250ZXh0LmxpbmVUbyhwb2ludHNbMV0ueCwgcG9pbnRzWzFdLnkpXHJcbiAgICBjb250ZXh0LmxpbmVUbyhwb2ludHNbMl0ueCwgcG9pbnRzWzJdLnkpXHJcbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpXHJcbiAgICBjb250ZXh0LnN0cm9rZSgpXHJcbiAgICBjb250ZXh0LmZpbGwoKVxyXG5cclxuICAgIGNvbnRleHQuc2V0VHJhbnNmb3JtKDEsIDAsIDAsIDEsIDAsIDApXHJcbiAgICBjb250ZXh0LnJlc3RvcmUoKVxyXG4gIH1cclxufSIsImltcG9ydCBTY2VuZSBmcm9tICcuL3NjZW5lJ1xyXG5pbXBvcnQgUk5EIGZyb20gJy4vcm5kJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RhckJhY2tncm91bmRcclxue1xyXG4gIHNjZW5lOiBTY2VuZVxyXG4gIHN0YXJzOiBBcnJheTxhbnk+XHJcblxyXG4gIGNvbnN0cnVjdG9yKHNjZW5lOiBTY2VuZSlcclxuICB7XHJcbiAgICB0aGlzLnNjZW5lID0gc2NlbmVcclxuICAgIHRoaXMuc3RhcnMgPSBbXVxyXG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IDMwMDsgaW5kZXgrKylcclxuICAgIHtcclxuICAgICAgY29uc3Qgc2l6ZSA9IFJORC5iZXR3ZWVuKDEsIDIpXHJcbiAgICAgIGNvbnN0IGFscGhhID0gUk5ELmZsb2F0QmV0d2VlbigwLjEsIDEpXHJcbiAgICAgIGNvbnN0IHggPSBSTkQuYmV0d2VlbigwLCBzY2VuZS53aWR0aClcclxuICAgICAgY29uc3QgeSA9IFJORC5iZXR3ZWVuKDAsIHNjZW5lLmhlaWdodClcclxuICAgICAgY29uc3QgY29sb3IgPSBSTkQucGljayhbICcyNTUsIDI1NSwgMjU1JywgJzEyOCwgMCwgMTI4JywgJzM0LCAzNCwgMTUzJyBdKVxyXG4gICAgICAvLyBjb25zdCBjb2xvciA9IHBpY2soWyAweGZmZmZmZiwgMHg4MDAwODAsIDB4MjIyMjk5IF0pXHJcblxyXG4gICAgICB0aGlzLnN0YXJzLnB1c2goe1xyXG4gICAgICAgIHgsXHJcbiAgICAgICAgeSxcclxuICAgICAgICBzaXplLFxyXG4gICAgICAgIGNvbG9yLFxyXG4gICAgICAgIGFscGhhXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB1cGRhdGUoZGVsdGE6IG51bWJlcik6IHZvaWRcclxuICB7XHJcbiAgICAvLyBUT0RPIGNoYW5nZSB0aGUgc3RhcnRzIGEgbGl0dGxlXHJcbiAgfVxyXG5cclxuICByZW5kZXIoKTogdm9pZFxyXG4gIHtcclxuICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLnNjZW5lLmNvbnRleHQgYXMgQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEXHJcblxyXG4gICAgY29udGV4dC5zYXZlKClcclxuXHJcbiAgICB0aGlzLnN0YXJzLmZvckVhY2goc3RhciA9PiB7XHJcbiAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gYHJnYmEoJHtzdGFyLmNvbG9yfSwgJHtzdGFyLmFscGhhfSlgXHJcbiAgICAgIGNvbnRleHQuZmlsbFJlY3Qoc3Rhci54LCBzdGFyLnksIHN0YXIuc2l6ZSwgc3Rhci5zaXplKVxyXG4gICAgfSlcclxuXHJcbiAgICBjb250ZXh0LnJlc3RvcmUoKVxyXG4gIH1cclxufVxyXG4iLCJcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmVjdG9yMkRcclxue1xyXG4gIHg6IG51bWJlclxyXG4gIHk6IG51bWJlclxyXG5cclxuICBjb25zdHJ1Y3Rvcih4OiBudW1iZXIgPSAwLCB5OiBudW1iZXIgPSAwKVxyXG4gIHtcclxuICAgIHRoaXMueCA9IHhcclxuICAgIHRoaXMueSA9IHlcclxuICB9XHJcblxyXG4gIGNsb25lKCk6IFZlY3RvcjJEXHJcbiAge1xyXG4gICAgcmV0dXJuIG5ldyBWZWN0b3IyRCh0aGlzLngsIHRoaXMueSlcclxuICB9XHJcblxyXG4gIHNldCh4OiBudW1iZXIsIHk6IG51bWJlcik6IHZvaWRcclxuICB7XHJcbiAgICB0aGlzLnggPSB4XHJcbiAgICB0aGlzLnkgPSB5XHJcbiAgfVxyXG5cclxuICBhZGQoeDogbnVtYmVyIHwgVmVjdG9yMkQsIHk6IG51bWJlciB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZCk6IHRoaXNcclxuICB7XHJcbiAgICBpZiAoeSA9PT0gdW5kZWZpbmVkKVxyXG4gICAge1xyXG4gICAgICB5ID0gKHggYXMgVmVjdG9yMkQpLnlcclxuICAgICAgeCA9ICh4IGFzIFZlY3RvcjJEKS54XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy54ICs9IHggYXMgbnVtYmVyXHJcbiAgICB0aGlzLnkgKz0geSBhcyBudW1iZXJcclxuXHJcbiAgICByZXR1cm4gdGhpc1xyXG4gIH1cclxuXHJcbiAgbXVsdGlwbHkoeDogbnVtYmVyIHwgVmVjdG9yMkQsIHk6IG51bWJlciB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZCk6IHRoaXNcclxuICB7XHJcbiAgICBpZiAoeSA9PT0gdW5kZWZpbmVkKVxyXG4gICAge1xyXG4gICAgICB5ID0gKHggYXMgVmVjdG9yMkQpLnlcclxuICAgICAgeCA9ICh4IGFzIFZlY3RvcjJEKS54XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy54ICo9IHggYXMgbnVtYmVyXHJcbiAgICB0aGlzLnkgKj0geSBhcyBudW1iZXJcclxuXHJcbiAgICByZXR1cm4gdGhpc1xyXG4gIH1cclxuXHJcbiAgc2V0VG9Qb2xhcihhemltdXRoOiBudW1iZXIsIHJhZGl1czogbnVtYmVyID0gMSk6IHRoaXNcclxuICB7XHJcbiAgICB0aGlzLnggPSBNYXRoLmNvcyhhemltdXRoKSAqIHJhZGl1c1xyXG4gICAgdGhpcy55ID0gTWF0aC5zaW4oYXppbXV0aCkgKiByYWRpdXNcclxuXHJcbiAgICByZXR1cm4gdGhpc1xyXG4gIH1cclxufSIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iXSwibmFtZXMiOlsiY2FudmFzIiwidGhpcyIsInNjZW5lIiwic2hpcCIsInVuZGVmaW5lZCIsImJhY2tncm91bmQiLCJyb2NrcyIsImJ1bGxldHMiLCJwYXJ0aWNhbHMiLCJyZXNpemUiLCJzaXplIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0Iiwid2lkdGgiLCJoZWlnaHQiLCJwbGF5IiwiYWRkIiwiY291bnQiLCJyb2NrIiwiYmV0d2VlbiIsImFuZ2xlIiwic2V0VmVsb2NpdHkiLCJzdG9wIiwiY2xhbXAiLCJ2YWx1ZSIsIm1pbiIsIm1heCIsIndyYXAiLCJBbmdsZSIsImEiLCJiIiwiTWF0aCIsImF0YW4yIiwieSIsIngiLCJQSSIsImZsb29yIiwiZmxvYXRCZXR3ZWVuIiwicmFuZG9tIiwicGljayIsImNob2ljZXMiLCJsZW5ndGgiLCJwb3NpdGlvbiIsInJvdGF0aW9uU3BlZWQiLCJ2ZWxvY2l0eSIsInBvaW50cyIsInIiLCJ0b3RhbFBvaW50cyIsInJhZGl1cyIsImFuZ2xlU3RlcCIsImkiLCJwb2ludCIsImNvcyIsInNpbiIsInB1c2giLCJwb2ludHNPbkNpcmNsZSIsImZvckVhY2giLCJjcmVhdGVQb2x5Z29uUG9pbnRzIiwidXBkYXRlIiwiZGVsdGEiLCJtb3ZlbWVudCIsImNsb25lIiwibXVsdGlwbHkiLCJyZW5kZXIiLCJjb250ZXh0Iiwic2F2ZSIsInN0cm9rZVN0eWxlIiwiZmlsbFN0eWxlIiwidHJhbnNsYXRlIiwicm90YXRlIiwicmFkaWFucyIsImJlZ2luUGF0aCIsIm1vdmVUbyIsImluZGV4IiwibGluZVRvIiwiY2xvc2VQYXRoIiwic3Ryb2tlIiwiZmlsbCIsInNldFRyYW5zZm9ybSIsInJlc3RvcmUiLCJnZXRDb250ZXh0IiwicG9pbnRlciIsImluIiwiZ2FtZU9iamVjdHMiLCJhbmltYXRpb25GcmFtZUlkIiwibGFzdEZyYW1lVGltZSIsIm9iaiIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsInJlY3QiLCJzY2FsZVgiLCJzY2FsZVkiLCJjbGllbnRYIiwibGVmdCIsImNsaWVudFkiLCJ0b3AiLCJmcmFtZSIsIndpbmRvdyIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwidGltZSIsImZpbmQiLCJjbGVhclJlY3QiLCJpdGVtIiwiZmlsbFRleHQiLCJfYW5nbGUiLCJfc3BlZWQiLCJzcGVlZCIsInNldFRvUG9sYXIiLCJzdGFycyIsImFscGhhIiwiY29sb3IiLCJzdGFyIiwiZmlsbFJlY3QiLCJWZWN0b3IyRCIsInNldCIsImF6aW11dGgiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJleHBvcnRzIiwibW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImRvY3VtZW50IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJhc3Rlcm9pZHMiLCJjb25zb2xlIiwibG9nIl0sInNvdXJjZVJvb3QiOiIifQ==