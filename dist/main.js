(()=>{"use strict";var t,e={913:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(147),o=function(){function t(t){this.scene=new n.default(t),this.animationFrameId=0,this.lastFrameTime=0,this.onFrame=this.onFrame.bind(this)}return t.prototype.resize=function(){var t=this.scene.canvas.getBoundingClientRect();this.scene.canvas.width=t.width,this.scene.canvas.height=t.height},t.prototype.play=function(){this.scene.create(),this.onFrame(0)},t.prototype.onFrame=function(t){var e=(t-this.lastFrameTime)/1e3;this.lastFrameTime=t,this.scene.update(e),this.scene.render(e),this.animationFrameId=window.requestAnimationFrame(this.onFrame)},t.prototype.stop=function(){window.cancelAnimationFrame(this.animationFrameId)},t}();e.default=o},208:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(993),o=function(){function t(t,e,i,o,s){void 0===s&&(s=2),this.scene=t,this.active=!0,this.pooled=!0,this.position=new n.default(e,i),this.size=s,this.velocity=o}return t.prototype.getBoundingBox=function(){var t=this.position.x,e=this.position.y;return{x:t,y:e,top:e-this.size/2,right:t+this.size/2,bottom:e+this.size/2,left:t-this.size/2}},t.prototype.update=function(t){if(this.active){var e=this.velocity.clone().multiply(t,t);this.position.add(e);var i=2*this.size;(this.position.x<-i||this.position.x>this.scene.width+i||this.position.y<-i||this.position.y>this.scene.height+i)&&this.scene.destroyGameObject(this)}},t.prototype.render=function(t){this.active&&(t.save(),t.fillStyle="#ffffff",t.beginPath(),t.arc(this.position.x,this.position.y,this.size,0,360,!1),t.fill(),t.closePath(),t.restore())},t}();e.default=o},489:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t){this.canvas=t,this.pointer={x:0,y:0,in:!1},this.turnToMouse=!1,this.turn=0,this.accelerate=0,this.shoot=!1,this.changed=!1,t.tabIndex=0,t.focus(),this.onMouseDown=this.onMouseDown.bind(this),this.onMouseEnter=this.onMouseEnter.bind(this),this.onMouseLeave=this.onMouseLeave.bind(this),this.onMouseMove=this.onMouseMove.bind(this),this.onKeyDown=this.onKeyDown.bind(this),this.onKeyUp=this.onKeyUp.bind(this),this.canvas.addEventListener("mousedown",this.onMouseDown),this.canvas.addEventListener("mouseenter",this.onMouseEnter),this.canvas.addEventListener("mouseleave",this.onMouseLeave),this.canvas.addEventListener("mousemove",this.onMouseMove),this.canvas.addEventListener("keydown",this.onKeyDown),this.canvas.addEventListener("keyup",this.onKeyUp)}return t.prototype.onMouseDown=function(t){t.preventDefault(),this.turnToMouse=!0},t.prototype.onMouseEnter=function(t){t.preventDefault(),this.pointer.in=!0},t.prototype.onMouseLeave=function(t){t.preventDefault(),this.pointer.in=!1},t.prototype.onMouseMove=function(t){t.preventDefault();var e=this.canvas.getBoundingClientRect(),i=this.canvas.width/e.width,n=this.canvas.height/e.height;this.pointer.x=(t.clientX-e.left)*i,this.pointer.y=(t.clientY-e.top)*n},t.prototype.onKeyDown=function(t){t.preventDefault(),"w"===t.key||"ArrowUp"===t.key?this.accelerate=1:"s"===t.key||"ArrowDown"===t.key?this.accelerate=-1:"a"===t.key||"ArrowLeft"===t.key?(this.turn=-1,this.turnToMouse=!1):"d"===t.key||"ArrowRight"===t.key?(this.turn=1,this.turnToMouse=!1):" "===t.key&&(this.shoot=!0),this.changed=!0},t.prototype.onKeyUp=function(t){"w"===t.key||"ArrowUp"===t.key||"s"===t.key||"ArrowDown"===t.key?this.accelerate=0:"a"===t.key||"ArrowLeft"===t.key||"d"===t.key||"ArrowRight"===t.key?this.turn=0:" "===t.key&&(this.shoot=!1),this.changed=!0},t.prototype.destroy=function(){this.canvas.removeEventListener("mousedown",this.onMouseDown),this.canvas.removeEventListener("mouseenter",this.onMouseEnter),this.canvas.removeEventListener("mouseleave",this.onMouseLeave),this.canvas.removeEventListener("mousemove",this.onMouseMove),this.canvas.removeEventListener("keydown",this.onKeyDown),this.canvas.removeEventListener("keyup",this.onKeyUp)},t}();e.default=i},490:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Angle=e.wrap=e.clamp=e.dec=e.inc=void 0;var i=2*Math.PI;e.inc=function(t,e,i){return t+=e,Math.min(t,i)},e.dec=function(t,e,i){return t-=e,Math.max(t,i)},e.clamp=function(t,e,i){return t<e&&(t=e),t>i&&(t=i),t},e.wrap=function(t,e,i){return t<e&&(t=i+t%i),t>i&&(t=e+t%i),t},e.Angle={toDegrees:function(t){return t*(180/Math.PI)},toRadians:function(t){return t*(Math.PI/180)},between:function(t,e){return Math.atan2(e.y-t.y,e.x-t.x)*(180/Math.PI)},rotateTo:function(t,e,n){return void 0===n&&(n=.05),t!==e&&(Math.abs(e-t)<=n||Math.abs(e-t)>=i-n?t=e:(Math.abs(e-t)>Math.PI&&(e<t?e+=i:e-=i),e>t?t+=n:e<t&&(t-=n))),t}},e.default={inc:e.inc,dec:e.dec,clamp:e.clamp,wrap:e.wrap,Angle:e.Angle}},231:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.pick=e.floatBetween=e.between=void 0,e.between=function(t,i){return Math.floor((0,e.floatBetween)(t,i))},e.floatBetween=function(t,e){return Math.random()*(t-e)+e},e.pick=function(t){return t[(0,e.between)(0,t.length)]},e.default={between:e.between,floatBetween:e.floatBetween,pick:e.pick}},541:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(993),o=i(490),s=i(231),a=function(){function t(t,e,i,o){void 0===o&&(o=28),this.scene=t,this.active=!0,this.position=new n.default(e,i),this.size=o,this.angle=0,this.rotationSpeed=s.default.floatBetween(.1,2),this.velocity=new n.default(s.default.between(-200,200),s.default.between(-200,200)),this.points=function(t,e,i,o){void 0===i&&(i=20),void 0===o&&(o=8);var a=function(t,e,i,o){for(var s=6.28/t,a=0,r=[],h=0;h<t;h++){var u=new n.default(0+o*Math.cos(a),0+o*Math.sin(a));r.push(u),a+=s}return r}(o,0,0,i);return a.forEach((function(t){t.x+=s.default.between(-.25*i,.25*i),t.y+=s.default.between(-.25*i,.25*i)})),a}(0,0,this.size,12)}return Object.defineProperty(t.prototype,"radians",{get:function(){return this.angle*Math.PI/180},enumerable:!1,configurable:!0}),t.prototype.getBoundingBox=function(){var t=this.position.x+this.size/2,e=this.position.y+this.size/2;return{x:t,y:e,top:e-this.size,right:t+this.size,bottom:e+this.size,left:t-this.size}},t.prototype.update=function(t){var e=this.velocity.clone().multiply(t,t);this.position.add(e),this.position.x=o.default.wrap(this.position.x,-2*this.size,this.scene.width+2*this.size),this.position.y=o.default.wrap(this.position.y,-2*this.size,this.scene.height+2*this.size),this.angle+=this.rotationSpeed},t.prototype.render=function(t){t.save(),t.strokeStyle="#aaaaaa",t.fillStyle="#333333",t.translate(this.position.x+this.size/2,this.position.y+this.size/2),t.rotate(this.radians),t.beginPath(),t.moveTo(this.points[0].x,this.points[0].y);for(var e=1;e<this.points.length;e++){var i=this.points[e];t.lineTo(i.x,i.y)}t.closePath(),t.stroke(),t.fill(),t.setTransform(1,0,0,1,0,0),t.restore()},t}();e.default=a},147:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(489),o=i(490),s=i(841),a=i(208),r=i(541),h=i(934),u=i(231),c=i(993),p=function(){function t(t,e,i){this.a=t,this.b=e,this.callback=i}return t.prototype.check=function(){var t=this;return this.a.forEach((function(e){e.active&&t.b.forEach((function(i){i.active&&function(t,e){var i=t.getBoundingBox(),n=e.getBoundingBox();return!(i.right<=n.left||i.bottom<=n.top||i.x>=n.right||i.y>=n.bottom)}(e,i)&&t.callback(e,i)}))})),[]},t}(),d=function(){function t(t){this.canvas=t,this.context=t.getContext("2d"),this.input=new n.default(this.canvas),this.displayList=[],this.ship=null,this.rocks=[],this.bullets=[],this.particals=[],this.colliders=[]}return Object.defineProperty(t.prototype,"width",{get:function(){return this.canvas.width},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return this.canvas.height},enumerable:!1,configurable:!0}),t.prototype.addGameObject=function(t,e,i){if(void 0===e&&(e=void 0),void 0===i&&(i=void 0),e){var n=this.displayList.indexOf(e);this.displayList.splice(n-1,0,t)}else i?(n=this.displayList.indexOf(i),this.displayList.splice(n,0,t)):this.displayList.push(t)},t.prototype.addCollider=function(t,e,i){t=Array.isArray(t)?t:[t],e=Array.isArray(e)?e:[e];var n=new p(t,e,i);return this.colliders.push(n),n},t.prototype.destroyGameObject=function(t){var e=this.displayList.indexOf(t);t.pooled&&(t.active=!1),e>=0&&this.displayList.splice(e,1)},t.prototype.create=function(){this.ship=new s.default(this,this.width/2,this.height/2),this.addGameObject(new h.default(this));for(var t=0;t<10;t++){var e=new r.default(this,u.default.between(0,this.width),u.default.between(0,this.height));this.addGameObject(e),this.rocks.push(e)}this.addGameObject(this.ship),this.addCollider(this.ship,this.rocks,this.onShipCrash.bind(this)),this.addCollider(this.bullets,this.rocks,this.onBulletHitRock.bind(this))},t.prototype.destroy=function(){this.input.destroy()},t.prototype.update=function(t){var e=this.ship;if(this.input.changed){if(e.turn(this.input.turn),e.turnTo(null),1===this.input.accelerate)e.accelerate();else if(-1===this.input.accelerate)e.brake();else if(!0===this.input.shoot&&e.fire()){var i=new c.default(600,0);i.rotate(e.radians);var n=new a.default(this,e.position.x,e.position.y,i);this.bullets.push(n),this.addGameObject(n,e)}this.input.changed=!1}if(this.input.turnToMouse&&this.input.pointer.in){var s=o.default.Angle.between(e.position,this.input.pointer);e.turnTo(s)}this.colliders.forEach((function(t){t.check()}))},t.prototype.render=function(t){var e=this,i=this.context;i.clearRect(0,0,this.canvas.width,this.canvas.height),this.displayList.forEach((function(i){i.update(t),i.render(e.context)}));var n=this.ship;i.fillStyle="#ffffff",i.fillText("".concat(this.input.pointer.x.toFixed(2),", ").concat(this.input.pointer.y.toFixed(2),"; ").concat(n.radians.toFixed(2),", ").concat(o.default.Angle.toRadians(n.rotateTo||0).toFixed(2)," ").concat(n.rotationSpeed.toFixed(2),"; ").concat(n.speed.toFixed(2)," ").concat(n.velocity.x.toFixed(2),", ").concat(n.velocity.y.toFixed(2),"; ").concat(n.weaponCooldown.toFixed(2)),10,10),i.fillText("Controls ".concat(this.input.accelerate,", ").concat(this.input.turn,", ").concat(this.input.shoot),10,20),i.fillText("Renderer ".concat(this.displayList.length),10,30)},t.prototype.onShipCrash=function(t,e){return t=t,!0},t.prototype.onBulletHitRock=function(t,e){var i=this;this.destroyGameObject(t);var n=this.bullets.indexOf(t);this.bullets.splice(n,1);var o=e;this.destroyGameObject(e);var s=this.rocks.indexOf(o);if(this.rocks.splice(s,1),o.size>8){var a=Math.max(o.size/2,8);[new r.default(this,e.position.x,e.position.y,a),new r.default(this,e.position.x,e.position.y,a)].forEach((function(t){i.addGameObject(t),i.rocks.push(t)}))}return!0},t}();e.default=d},841:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(993),o=i(490),s=function(){function t(t,e,i,o){void 0===o&&(o=20),this.scene=t,this.active=!0,this.position=new n.default(e,i),this.velocity=new n.default(0,0),this.size=o,this._angle=0,this._speed=0,this.rotateTo=null,this.rotationSpeed=0,this.weaponCooldown=0}return t.prototype.turn=function(t){switch(t){case-1:this.rotationSpeed=-1;break;case 0:this.rotationSpeed=0;break;case 1:this.rotationSpeed=1}},t.prototype.turnTo=function(t){this.rotateTo=t},t.prototype.accelerate=function(){this.speed+=5,this.velocity.add(this.speed,this.speed),this.velocity.setToPolar(this.radians,this.speed)},t.prototype.brake=function(){this.speed-=5},t.prototype.fire=function(){var t=0===this.weaponCooldown;return t&&(this.weaponCooldown=.125),t},Object.defineProperty(t.prototype,"speed",{get:function(){return this._speed},set:function(t){this._speed=o.default.clamp(t,0,500)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"angle",{get:function(){return this._angle},set:function(t){this._angle=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"radians",{get:function(){return o.default.Angle.toRadians(this.angle)},enumerable:!1,configurable:!0}),t.prototype.getBoundingBox=function(){var t=this.position.x,e=this.position.y;return{x:t,y:e,top:e-this.size/2,right:t+this.size,bottom:e+this.size/2,left:t-this.size/2}},t.prototype.update=function(t){0!=this.rotationSpeed?this.angle+=this.rotationSpeed:null!=this.rotateTo&&(this.angle=o.default.Angle.toDegrees(o.default.Angle.rotateTo(this.radians,o.default.Angle.toRadians(this.rotateTo)))),this.weaponCooldown=o.default.dec(this.weaponCooldown,t,0);var e=this.velocity.clone().multiply(t,t);this.position.add(e),this.position.x=o.default.wrap(this.position.x,-2*this.size,this.scene.canvas.width+2*this.size),this.position.y=o.default.wrap(this.position.y,-2*this.size,this.scene.canvas.height+2*this.size)},t.prototype.render=function(t){var e=[new n.default(this.size,0),new n.default(-this.size/2,this.size/2),new n.default(-this.size/2,-this.size/2)];t.save(),t.strokeStyle="#aaaaaa",t.fillStyle="#999999",t.translate(this.position.x,this.position.y),t.rotate(this.radians),t.beginPath(),t.moveTo(e[0].x,e[0].y),t.lineTo(e[1].x,e[1].y),t.lineTo(e[2].x,e[2].y),t.closePath(),t.stroke(),t.fill(),t.setTransform(1,0,0,1,0,0),t.restore()},t}();e.default=s},934:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0});var n=i(231),o=function(){function t(t){this.scene=t,this.stars=[];for(var e=0;e<300;e++){var i=n.default.between(1,2),o=n.default.floatBetween(.1,1),s=n.default.between(0,t.width),a=n.default.between(0,t.height),r=n.default.pick(["255, 255, 255","128, 0, 128","34, 34, 153"]);this.stars.push({x:s,y:a,size:i,color:r,alpha:o})}}return t.prototype.update=function(t){},t.prototype.render=function(){var t=this.scene.context;t.save(),this.stars.forEach((function(e){t.fillStyle="rgba(".concat(e.color,", ").concat(e.alpha,")"),t.fillRect(e.x,e.y,e.size,e.size)})),t.restore()},t}();e.default=o},993:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){void 0===t&&(t=0),void 0===e&&(e=0),this.x=t,this.y=e}return t.prototype.clone=function(){return new t(this.x,this.y)},t.prototype.set=function(t,e){this.x=t,this.y=e},t.prototype.add=function(t,e){return void 0===e&&(e=void 0),void 0===e&&(e=t.y,t=t.x),this.x+=t,this.y+=e,this},t.prototype.multiply=function(t,e){return void 0===e&&(e=void 0),void 0===e&&(e=t.y,t=t.x),this.x*=t,this.y*=e,this},t.prototype.rotate=function(t){var e=Math.cos(t),i=Math.sin(t);return this.set(e*this.x-i*this.y,i*this.x+e*this.y)},t.prototype.setToPolar=function(t,e){return void 0===e&&(e=1),this.x=Math.cos(t)*e,this.y=Math.sin(t)*e,this},t}();e.default=i}},i={};t=function t(n){var o=i[n];if(void 0!==o)return o.exports;var s=i[n]={exports:{}};return e[n](s,s.exports,t),s.exports}(913),document.addEventListener("DOMContentLoaded",(function(){var e=document.getElementsByTagName("canvas")[0],i=new t.default(e);i.resize(),i.play(),window.addEventListener("resize",(function(){i.resize()}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUEsUUFFbkI2SixJQUFON0osSUFFRkEsRUFBS0QsRUFBZUMsRUFDcEJELEVBQUtBLEVBQWVBLEdBR3RCckIsS0FBS3FCLEdBQUtBLEVBQ1ZyQixLQUFLc0IsR0FBS0EsRUFFSHRCLE1BR1QsWUFBQXlILE9BQUEsU0FBT3JDLEdBRUwsSUFBTTRCLEVBQU14QyxLQUFLd0MsSUFBSTVCLEdBQ2Y2QixFQUFNekMsS0FBS3lDLElBQUk3QixHQUVyQixPQUFPcEYsS0FBS2tMLElBQUlsRSxFQUFNaEgsS0FBS3FCLEVBQUk0RixFQUFNakgsS0FBS3NCLEVBQUcyRixFQUFNakgsS0FBS3FCLEVBQUkyRixFQUFNaEgsS0FBS3NCLElBR3pFLFlBQUFvSixXQUFBLFNBQVdVLEVBQWlCeEUsR0FLMUIsWUFMMEIsSUFBQUEsSUFBQUEsRUFBQSxHQUUxQjVHLEtBQUtxQixFQUFJbUQsS0FBS3dDLElBQUlvRSxHQUFXeEUsRUFDN0I1RyxLQUFLc0IsRUFBSWtELEtBQUt5QyxJQUFJbUUsR0FBV3hFLEVBRXRCNUcsTUFFWCxFQWpFQSxHLGNDQUlxTCxFQUEyQixHWEQvQixFV0lBLFNBQVNDLEVBQW9CQyxHQUU1QixJQUFJQyxFQUFlSCxFQUF5QkUsR0FDNUMsUUFBcUJKLElBQWpCSyxFQUNILE9BQU9BLEVBQWFDLFFBR3JCLElBQUlDLEVBQVNMLEVBQXlCRSxHQUFZLENBR2pERSxRQUFTLElBT1YsT0FIQUUsRUFBb0JKLEdBQVVHLEVBQVFBLEVBQU9ELFFBQVNILEdBRy9DSSxFQUFPRCxRWHJCZixNQUVBRyxTQUFTaEksaUJBQWlCLG9CQUFvQixXQUM1QyxJQUFNN0QsRUFBUzZMLFNBQVNDLHFCQUFxQixVQUFVLEdBQ2pEQyxFQUFZLElBQUksVUFBVS9MLEdBQ2hDK0wsRUFBVXhMLFNBQ1Z3TCxFQUFVbkwsT0FFVk0sT0FBTzJDLGlCQUFpQixVQUFVLFdBQ2hDa0ksRUFBVXhMLGdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXN0ZXJvaWRzLy4vc3JjL2luZGV4LnRzIiwid2VicGFjazovL2FzdGVyb2lkcy8uL3NyYy9hc3Rlcm9pZHMudHMiLCJ3ZWJwYWNrOi8vYXN0ZXJvaWRzLy4vc3JjL2J1bGxldC50cyIsIndlYnBhY2s6Ly9hc3Rlcm9pZHMvLi9zcmMvaW5wdXQudHMiLCJ3ZWJwYWNrOi8vYXN0ZXJvaWRzLy4vc3JjL21hdGgudHMiLCJ3ZWJwYWNrOi8vYXN0ZXJvaWRzLy4vc3JjL3JuZC50cyIsIndlYnBhY2s6Ly9hc3Rlcm9pZHMvLi9zcmMvcm9jay50cyIsIndlYnBhY2s6Ly9hc3Rlcm9pZHMvLi9zcmMvc2NlbmUudHMiLCJ3ZWJwYWNrOi8vYXN0ZXJvaWRzLy4vc3JjL3NoaXAudHMiLCJ3ZWJwYWNrOi8vYXN0ZXJvaWRzLy4vc3JjL3N0YXJiYWNrZ3JvdW5kLnRzIiwid2VicGFjazovL2FzdGVyb2lkcy8uL3NyYy92ZWN0b3IyZC50cyIsIndlYnBhY2s6Ly9hc3Rlcm9pZHMvd2VicGFjay9ib290c3RyYXAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEFzdGVyb2lkcyBmcm9tICcuL2FzdGVyb2lkcydcclxuXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbigpIHtcclxuICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnY2FudmFzJylbMF0gYXMgSFRNTENhbnZhc0VsZW1lbnRcclxuICBjb25zdCBhc3Rlcm9pZHMgPSBuZXcgQXN0ZXJvaWRzKGNhbnZhcylcclxuICBhc3Rlcm9pZHMucmVzaXplKClcclxuICBhc3Rlcm9pZHMucGxheSgpXHJcblxyXG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCAoKSA9PiB7XHJcbiAgICBhc3Rlcm9pZHMucmVzaXplKClcclxuICB9KVxyXG59KSIsImltcG9ydCBTY2VuZSBmcm9tICcuL3NjZW5lJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBc3Rlcm9pZHNcbntcbiAgc2NlbmU6IFNjZW5lXG4gIGFuaW1hdGlvbkZyYW1lSWQ6IG51bWJlclxuICBsYXN0RnJhbWVUaW1lOiBudW1iZXJcblxuICBjb25zdHJ1Y3RvcihjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50KVxuICB7XG4gICAgdGhpcy5zY2VuZSA9IG5ldyBTY2VuZShjYW52YXMpXG4gICAgdGhpcy5hbmltYXRpb25GcmFtZUlkID0gMFxuICAgIHRoaXMubGFzdEZyYW1lVGltZSA9IDBcbiAgICB0aGlzLm9uRnJhbWUgPSB0aGlzLm9uRnJhbWUuYmluZCh0aGlzKVxuICB9XG5cbiAgcmVzaXplKClcbiAge1xuICAgIC8vIHRoaXMuc2NlbmUuY2FudmFzLndpZHRoID0gd2luZG93LmlubmVyV2lkdGhcbiAgICAvLyB0aGlzLnNjZW5lLmNhbnZhcy5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHRcblxuICAgIGNvbnN0IHNpemUgPSB0aGlzLnNjZW5lLmNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgICAgLy8gY29uc3QgcmF0aW8gPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyB8fCAxXG5cbiAgICB0aGlzLnNjZW5lLmNhbnZhcy53aWR0aCA9IHNpemUud2lkdGhcbiAgICB0aGlzLnNjZW5lLmNhbnZhcy5oZWlnaHQgPSBzaXplLmhlaWdodFxuICB9XG5cbiAgcGxheSgpXG4gIHtcbiAgICAvLyB0aGlzLmFjdGl2ZSA9IHRydWVcbiAgICB0aGlzLnNjZW5lLmNyZWF0ZSgpXG4gICAgdGhpcy5vbkZyYW1lKDApXG4gIH1cblxuICBvbkZyYW1lKHRpbWU6IG51bWJlcilcbiAge1xuICAgIGNvbnN0IGRlbHRhID0gKHRpbWUgLSB0aGlzLmxhc3RGcmFtZVRpbWUpIC8gMTAwMFxuICAgIHRoaXMubGFzdEZyYW1lVGltZSA9IHRpbWVcblxuICAgIHRoaXMuc2NlbmUudXBkYXRlKGRlbHRhKVxuICAgIHRoaXMuc2NlbmUucmVuZGVyKGRlbHRhKVxuXG4gICAgdGhpcy5hbmltYXRpb25GcmFtZUlkID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLm9uRnJhbWUpXG4gIH1cblxuICBzdG9wKClcbiAge1xuICAgIHdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLmFuaW1hdGlvbkZyYW1lSWQpXG4gIH1cbn0iLCJpbXBvcnQgU2NlbmUgZnJvbSBcIi4vc2NlbmVcIlxyXG5pbXBvcnQgeyBHYW1lT2JqZWN0LCBCb3ggfSBmcm9tIFwiLi9nYW1lb2JqZWN0XCJcclxuaW1wb3J0IFZlY3RvcjJEIGZyb20gXCIuL3ZlY3RvcjJkXCJcclxuaW1wb3J0IE0gZnJvbSAnLi9tYXRoJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQnVsbGV0IGltcGxlbWVudHMgR2FtZU9iamVjdFxyXG57XHJcbiAgc2NlbmU6IFNjZW5lXHJcbiAgYWN0aXZlOiBib29sZWFuXHJcbiAgcG9vbGVkOiBib29sZWFuXHJcbiAgcG9zaXRpb246IFZlY3RvcjJEXHJcbiAgc2l6ZTogbnVtYmVyXHJcbiAgdmVsb2NpdHk6IFZlY3RvcjJEXHJcblxyXG4gIGNvbnN0cnVjdG9yKHNjZW5lOiBTY2VuZSwgeDogbnVtYmVyLCB5OiBudW1iZXIsIHZlbG9jaXR5OiBWZWN0b3IyRCwgc2l6ZTogbnVtYmVyID0gMilcclxuICB7XHJcbiAgICB0aGlzLnNjZW5lID0gc2NlbmVcclxuICAgIHRoaXMuYWN0aXZlID0gdHJ1ZVxyXG4gICAgdGhpcy5wb29sZWQgPSB0cnVlXHJcbiAgICB0aGlzLnBvc2l0aW9uID0gbmV3IFZlY3RvcjJEKHgsIHkpXHJcbiAgICB0aGlzLnNpemUgPSBzaXplXHJcbiAgICB0aGlzLnZlbG9jaXR5ID0gdmVsb2NpdHlcclxuICB9XHJcblxyXG4gIGdldEJvdW5kaW5nQm94KCk6IEJveFxyXG4gIHtcclxuICAgIGNvbnN0IHggPSB0aGlzLnBvc2l0aW9uLnhcclxuICAgIGNvbnN0IHkgPSB0aGlzLnBvc2l0aW9uLnlcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHgsXHJcbiAgICAgIHksXHJcbiAgICAgIHRvcDogeSAtIHRoaXMuc2l6ZSAvIDIsXHJcbiAgICAgIHJpZ2h0OiB4ICsgdGhpcy5zaXplIC8gMixcclxuICAgICAgYm90dG9tOiB5ICsgdGhpcy5zaXplIC8gMixcclxuICAgICAgbGVmdDogeCAtIHRoaXMuc2l6ZSAvIDIsXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB1cGRhdGUoZGVsdGE6IG51bWJlcik6IHZvaWRcclxuICB7XHJcbiAgICBpZiAodGhpcy5hY3RpdmUpXHJcbiAgICB7XHJcbiAgICAgIGNvbnN0IHZlbG9jaXR5ID0gdGhpcy52ZWxvY2l0eS5jbG9uZSgpLm11bHRpcGx5KGRlbHRhLCBkZWx0YSlcclxuICAgICAgdGhpcy5wb3NpdGlvbi5hZGQodmVsb2NpdHkpXHJcblxyXG4gICAgICAvLyBUT0RPIGRlc3Ryb3kgaWYgb2Zmc2NyZWVuXHJcbiAgICAgIC8vIHRoaXMucG9zaXRpb24ueCA9IE0ud3JhcCh0aGlzLnBvc2l0aW9uLngsIC0odGhpcy5zaXplICogMiksIHRoaXMuc2NlbmUuY2FudmFzLndpZHRoICsgKHRoaXMuc2l6ZSAqIDIpKVxyXG4gICAgICAvLyB0aGlzLnBvc2l0aW9uLnkgPSBNLndyYXAodGhpcy5wb3NpdGlvbi55LCAtKHRoaXMuc2l6ZSAqIDIpLCB0aGlzLnNjZW5lLmNhbnZhcy5oZWlnaHQgKyAodGhpcy5zaXplICogMikpXHJcbiAgICAgIGNvbnN0IHNpemUyID0gdGhpcy5zaXplICogMlxyXG4gICAgICBjb25zdCBvZmZzY3JlZW4gPSB0aGlzLnBvc2l0aW9uLnggPCAtc2l6ZTIgfHwgdGhpcy5wb3NpdGlvbi54ID4gdGhpcy5zY2VuZS53aWR0aCArIHNpemUyIHx8IHRoaXMucG9zaXRpb24ueSA8IC1zaXplMiB8fCB0aGlzLnBvc2l0aW9uLnkgPiB0aGlzLnNjZW5lLmhlaWdodCArIHNpemUyXHJcbiAgICAgIGlmIChvZmZzY3JlZW4pXHJcbiAgICAgIHtcclxuICAgICAgICB0aGlzLnNjZW5lLmRlc3Ryb3lHYW1lT2JqZWN0KHRoaXMpXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlbmRlcihjb250ZXh0OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpOiB2b2lkXHJcbiAge1xyXG4gICAgaWYgKHRoaXMuYWN0aXZlKVxyXG4gICAge1xyXG4gICAgICBjb250ZXh0LnNhdmUoKVxyXG5cclxuICAgICAgY29udGV4dC5maWxsU3R5bGUgPSAnI2ZmZmZmZidcclxuXHJcbiAgICAgIGNvbnRleHQuYmVnaW5QYXRoKClcclxuICAgICAgY29udGV4dC5hcmModGhpcy5wb3NpdGlvbi54LCB0aGlzLnBvc2l0aW9uLnksIHRoaXMuc2l6ZSwgMCwgMzYwLCBmYWxzZSlcclxuICAgICAgY29udGV4dC5maWxsKClcclxuICAgICAgY29udGV4dC5jbG9zZVBhdGgoKVxyXG4gICAgICBjb250ZXh0LnJlc3RvcmUoKVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJcclxuZXhwb3J0IGludGVyZmFjZSBQb2ludGVyIHtcclxuICB4OiBudW1iZXIsXHJcbiAgeTogbnVtYmVyLFxyXG4gIGluOiBib29sZWFuXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIElucHV0XHJcbntcclxuICBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50XHJcbiAgcG9pbnRlcjogUG9pbnRlclxyXG4gIHR1cm5Ub01vdXNlOiBib29sZWFuXHJcbiAgdHVybjogbnVtYmVyXHJcbiAgYWNjZWxlcmF0ZTogbnVtYmVyXHJcbiAgc2hvb3Q6IGJvb2xlYW5cclxuICBjaGFuZ2VkOiBib29sZWFuXHJcblxyXG4gIGNvbnN0cnVjdG9yKGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQpXHJcbiAge1xyXG4gICAgdGhpcy5jYW52YXMgPSBjYW52YXNcclxuICAgIHRoaXMucG9pbnRlciA9IHsgeDogMCwgeTogMCwgaW46IGZhbHNlIH1cclxuICAgIHRoaXMudHVyblRvTW91c2UgPSBmYWxzZVxyXG4gICAgdGhpcy50dXJuID0gMFxyXG4gICAgdGhpcy5hY2NlbGVyYXRlID0gMFxyXG4gICAgdGhpcy5zaG9vdCA9IGZhbHNlXHJcbiAgICB0aGlzLmNoYW5nZWQgPSBmYWxzZVxyXG5cclxuICAgIC8vIGNhbnZhcyBtdXN0IGhhdmUgYSB0YWIgaW5kZXggdG8gaGF2ZSBrZXlib2FyZCBldmVudHNcclxuICAgIGNhbnZhcy50YWJJbmRleCA9IDBcclxuICAgIGNhbnZhcy5mb2N1cygpXHJcblxyXG4gICAgdGhpcy5vbk1vdXNlRG93biA9IHRoaXMub25Nb3VzZURvd24uYmluZCh0aGlzKVxyXG4gICAgdGhpcy5vbk1vdXNlRW50ZXIgPSB0aGlzLm9uTW91c2VFbnRlci5iaW5kKHRoaXMpXHJcbiAgICB0aGlzLm9uTW91c2VMZWF2ZSA9IHRoaXMub25Nb3VzZUxlYXZlLmJpbmQodGhpcylcclxuICAgIHRoaXMub25Nb3VzZU1vdmUgPSB0aGlzLm9uTW91c2VNb3ZlLmJpbmQodGhpcylcclxuICAgIHRoaXMub25LZXlEb3duID0gdGhpcy5vbktleURvd24uYmluZCh0aGlzKVxyXG4gICAgdGhpcy5vbktleVVwID0gdGhpcy5vbktleVVwLmJpbmQodGhpcylcclxuXHJcbiAgICB0aGlzLmNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLm9uTW91c2VEb3duKVxyXG4gICAgdGhpcy5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIHRoaXMub25Nb3VzZUVudGVyKVxyXG4gICAgdGhpcy5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIHRoaXMub25Nb3VzZUxlYXZlKVxyXG4gICAgdGhpcy5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5vbk1vdXNlTW92ZSlcclxuICAgIHRoaXMuY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLm9uS2V5RG93bilcclxuICAgIHRoaXMuY2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgdGhpcy5vbktleVVwKVxyXG4gIH1cclxuXHJcbiAgb25Nb3VzZURvd24oZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkXHJcbiAge1xyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxyXG4gICAgdGhpcy50dXJuVG9Nb3VzZSA9IHRydWVcclxuICB9XHJcblxyXG4gIG9uTW91c2VFbnRlcihldmVudDogTW91c2VFdmVudCk6IHZvaWRcclxuICB7XHJcbiAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpXHJcbiAgICB0aGlzLnBvaW50ZXIuaW4gPSB0cnVlXHJcbiAgfVxyXG5cclxuICBvbk1vdXNlTGVhdmUoZXZlbnQ6IE1vdXNlRXZlbnQpOiB2b2lkXHJcbiAge1xyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxyXG4gICAgdGhpcy5wb2ludGVyLmluID0gZmFsc2VcclxuICB9XHJcblxyXG4gIG9uTW91c2VNb3ZlKGV2ZW50OiBNb3VzZUV2ZW50KTogdm9pZFxyXG4gIHtcclxuICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KClcclxuICAgIGNvbnN0IHJlY3QgPSB0aGlzLmNhbnZhcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxyXG4gICAgY29uc3Qgc2NhbGVYID0gdGhpcy5jYW52YXMud2lkdGggLyByZWN0LndpZHRoXHJcbiAgICBjb25zdCBzY2FsZVkgPSB0aGlzLmNhbnZhcy5oZWlnaHQgLyByZWN0LmhlaWdodFxyXG5cclxuICAgIHRoaXMucG9pbnRlci54ID0gKGV2ZW50LmNsaWVudFggLSByZWN0LmxlZnQpICogc2NhbGVYXHJcbiAgICB0aGlzLnBvaW50ZXIueSA9IChldmVudC5jbGllbnRZIC0gcmVjdC50b3ApICogc2NhbGVZXHJcbiAgfVxyXG5cclxuICBvbktleURvd24oZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkXHJcbiAge1xyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKVxyXG4gICAgaWYgKGV2ZW50LmtleSA9PT0gJ3cnIHx8IGV2ZW50LmtleSA9PT0gJ0Fycm93VXAnKVxyXG4gICAge1xyXG4gICAgICB0aGlzLmFjY2VsZXJhdGUgPSAxXHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChldmVudC5rZXkgPT09ICdzJyB8fCBldmVudC5rZXkgPT09ICdBcnJvd0Rvd24nKVxyXG4gICAge1xyXG4gICAgICB0aGlzLmFjY2VsZXJhdGUgPSAtMVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoZXZlbnQua2V5ID09PSAnYScgfHwgZXZlbnQua2V5ID09PSAnQXJyb3dMZWZ0JylcclxuICAgIHtcclxuICAgICAgdGhpcy50dXJuID0gLTFcclxuICAgICAgdGhpcy50dXJuVG9Nb3VzZSA9IGZhbHNlXHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChldmVudC5rZXkgPT09ICdkJyB8fCBldmVudC5rZXkgPT09ICdBcnJvd1JpZ2h0JylcclxuICAgIHtcclxuICAgICAgdGhpcy50dXJuID0gMVxyXG4gICAgICB0aGlzLnR1cm5Ub01vdXNlID0gZmFsc2VcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGV2ZW50LmtleSA9PT0gJyAnKVxyXG4gICAge1xyXG4gICAgICB0aGlzLnNob290ID0gdHJ1ZVxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuY2hhbmdlZCA9IHRydWVcclxuICB9XHJcblxyXG4gIG9uS2V5VXAoZXZlbnQ6IEtleWJvYXJkRXZlbnQpXHJcbiAge1xyXG4gICAgaWYgKGV2ZW50LmtleSA9PT0gJ3cnIHx8IGV2ZW50LmtleSA9PT0gJ0Fycm93VXAnKVxyXG4gICAge1xyXG4gICAgICB0aGlzLmFjY2VsZXJhdGUgPSAwXHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChldmVudC5rZXkgPT09ICdzJyB8fCBldmVudC5rZXkgPT09ICdBcnJvd0Rvd24nKVxyXG4gICAge1xyXG4gICAgICB0aGlzLmFjY2VsZXJhdGUgPSAwXHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChldmVudC5rZXkgPT09ICdhJyB8fCBldmVudC5rZXkgPT09ICdBcnJvd0xlZnQnKVxyXG4gICAge1xyXG4gICAgICB0aGlzLnR1cm4gPSAwXHJcbiAgICB9XHJcbiAgICBlbHNlIGlmIChldmVudC5rZXkgPT09ICdkJyB8fCBldmVudC5rZXkgPT09ICdBcnJvd1JpZ2h0JylcclxuICAgIHtcclxuICAgICAgdGhpcy50dXJuID0gMFxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoZXZlbnQua2V5ID09PSAnICcpXHJcbiAgICB7XHJcbiAgICAgIHRoaXMuc2hvb3QgPSBmYWxzZVxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuY2hhbmdlZCA9IHRydWVcclxuICB9XHJcblxyXG4gIGRlc3Ryb3koKVxyXG4gIHtcclxuICAgIHRoaXMuY2FudmFzLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMub25Nb3VzZURvd24pXHJcbiAgICB0aGlzLmNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgdGhpcy5vbk1vdXNlRW50ZXIpXHJcbiAgICB0aGlzLmNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgdGhpcy5vbk1vdXNlTGVhdmUpXHJcbiAgICB0aGlzLmNhbnZhcy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLm9uTW91c2VNb3ZlKVxyXG4gICAgdGhpcy5jYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMub25LZXlEb3duKVxyXG4gICAgdGhpcy5jYW52YXMucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5dXAnLCB0aGlzLm9uS2V5VXApXHJcbiAgfVxyXG59IiwiaW1wb3J0IHsgVmVjdG9yTGlrZSB9IGZyb20gJy4vdHlwZXMnXHJcblxyXG5jb25zdCBQSTIgPSBNYXRoLlBJICogMlxyXG5cclxuZXhwb3J0IGNvbnN0IGluYzogRnVuY3Rpb24gPSAodmFsdWU6IG51bWJlciwgYW1vdW50OiBudW1iZXIsIG1heDogbnVtYmVyKTogbnVtYmVyID0+IHtcclxuICB2YWx1ZSArPSBhbW91bnRcclxuICB2YWx1ZSA9IE1hdGgubWluKHZhbHVlLCBtYXgpXHJcbiAgcmV0dXJuIHZhbHVlXHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBkZWM6IEZ1bmN0aW9uID0gKHZhbHVlOiBudW1iZXIsIGFtb3VudDogbnVtYmVyLCBtaW46IG51bWJlcik6IG51bWJlciA9PiB7XHJcbiAgdmFsdWUgLT0gYW1vdW50XHJcbiAgdmFsdWUgPSBNYXRoLm1heCh2YWx1ZSwgbWluKVxyXG4gIHJldHVybiB2YWx1ZVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgY2xhbXA6IEZ1bmN0aW9uID0gKHZhbHVlOiBudW1iZXIsIG1pbjogbnVtYmVyLCBtYXg6IG51bWJlcik6IG51bWJlciA9PiB7XHJcbiAgaWYgKHZhbHVlIDwgbWluKVxyXG4gIHtcclxuICAgIHZhbHVlID0gbWluXHJcbiAgfVxyXG5cclxuICBpZiAodmFsdWUgPiBtYXgpXHJcbiAge1xyXG4gICAgdmFsdWUgPSBtYXhcclxuICB9XHJcblxyXG4gIHJldHVybiB2YWx1ZVxyXG59XHJcblxyXG5leHBvcnQgY29uc3Qgd3JhcDogRnVuY3Rpb24gPSAodmFsdWU6IG51bWJlciwgbWluOiBudW1iZXIsIG1heDogbnVtYmVyKTogbnVtYmVyID0+IHtcclxuICBpZiAodmFsdWUgPCBtaW4pXHJcbiAge1xyXG4gICAgdmFsdWUgPSBtYXggKyAodmFsdWUgJSBtYXgpXHJcbiAgfVxyXG5cclxuICBpZiAodmFsdWUgPiBtYXgpXHJcbiAge1xyXG4gICAgdmFsdWUgPSBtaW4gKyAodmFsdWUgJSBtYXgpXHJcbiAgfVxyXG5cclxuICByZXR1cm4gdmFsdWVcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IEFuZ2xlID0ge1xyXG5cclxuICB0b0RlZ3JlZXMocmFkaWFuczogbnVtYmVyKTogbnVtYmVyXHJcbiAge1xyXG4gICAgcmV0dXJuIHJhZGlhbnMgKiAoMTgwIC8gTWF0aC5QSSlcclxuICB9LFxyXG5cclxuICB0b1JhZGlhbnMoZGVncmVlczogbnVtYmVyKTogbnVtYmVyXHJcbiAge1xyXG4gICAgcmV0dXJuIGRlZ3JlZXMgKiAgKE1hdGguUEkgLyAxODApXHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICpcclxuICAgKiBAcGFyYW0gYVxyXG4gICAqIEBwYXJhbSBiXHJcbiAgICogQHJldHVybnMgYW5nbGUgaW4gZGVncmVlc1xyXG4gICAqL1xyXG4gIGJldHdlZW4oYTogVmVjdG9yTGlrZSwgYjogVmVjdG9yTGlrZSk6IG51bWJlclxyXG4gIHtcclxuICAgIHJldHVybiBNYXRoLmF0YW4yKGIueSAtIGEueSwgYi54IC0gYS54KSAqICgxODAgLyBNYXRoLlBJKVxyXG4gIH0sXHJcblxyXG4gIHJvdGF0ZVRvKGN1cnJlbnQ6IG51bWJlciwgdGFyZ2V0OiBudW1iZXIsIGxlcnA6IG51bWJlciA9IDAuMDUpOiBudW1iZXJcclxuICB7XHJcbiAgICBpZiAoY3VycmVudCAhPT0gdGFyZ2V0KVxyXG4gICAge1xyXG4gICAgICBpZiAoTWF0aC5hYnModGFyZ2V0IC0gY3VycmVudCkgPD0gbGVycCB8fCBNYXRoLmFicyh0YXJnZXQgLSBjdXJyZW50KSA+PSAoUEkyIC0gbGVycCkpXHJcbiAgICAgIHtcclxuICAgICAgICBjdXJyZW50ID0gdGFyZ2V0XHJcbiAgICAgIH1cclxuICAgICAgZWxzZVxyXG4gICAgICB7XHJcbiAgICAgICAgaWYgKE1hdGguYWJzKHRhcmdldCAtIGN1cnJlbnQpID4gTWF0aC5QSSlcclxuICAgICAgICB7XHJcbiAgICAgICAgICBpZiAodGFyZ2V0IDwgY3VycmVudClcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgdGFyZ2V0ICs9IFBJMlxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZVxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICB0YXJnZXQgLT0gUEkyXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGFyZ2V0ID4gY3VycmVudClcclxuICAgICAgICB7XHJcbiAgICAgICAgICBjdXJyZW50ICs9IGxlcnBcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodGFyZ2V0IDwgY3VycmVudClcclxuICAgICAgICB7XHJcbiAgICAgICAgICBjdXJyZW50IC09IGxlcnBcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY3VycmVudFxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIGluYyxcclxuICBkZWMsXHJcbiAgY2xhbXAsXHJcbiAgd3JhcCxcclxuICBBbmdsZVxyXG59IiwiZXhwb3J0IGNvbnN0IGJldHdlZW4gPSAobWluOiBudW1iZXIsIG1heDogbnVtYmVyKTogbnVtYmVyID0+IHtcclxuICByZXR1cm4gTWF0aC5mbG9vcihmbG9hdEJldHdlZW4obWluLCBtYXgpKVxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgZmxvYXRCZXR3ZWVuID0gKG1pbjogbnVtYmVyLCBtYXg6IG51bWJlcik6IG51bWJlciA9PiB7XHJcbiAgcmV0dXJuIChNYXRoLnJhbmRvbSgpICogKG1pbiAtIG1heCkpICsgbWF4XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBwaWNrID0gKGNob2ljZXM6IEFycmF5PGFueT4pOiBhbnkgPT4ge1xyXG4gIGNvbnN0IGluZGV4ID0gYmV0d2VlbigwLCBjaG9pY2VzLmxlbmd0aClcclxuICByZXR1cm4gY2hvaWNlc1tpbmRleF1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gIGJldHdlZW4sXHJcbiAgZmxvYXRCZXR3ZWVuLFxyXG4gIHBpY2tcclxufSIsImltcG9ydCBTY2VuZSBmcm9tICcuL3NjZW5lJ1xyXG5pbXBvcnQgeyBHYW1lT2JqZWN0LCBCb3ggfSBmcm9tICcuL2dhbWVvYmplY3QnXHJcbmltcG9ydCBWZWN0b3IyRCBmcm9tICcuL3ZlY3RvcjJkJ1xyXG5pbXBvcnQgTSBmcm9tICcuL21hdGgnXHJcbmltcG9ydCBSTkQgZnJvbSAnLi9ybmQnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSb2NrIGltcGxlbWVudHMgR2FtZU9iamVjdFxyXG57XHJcbiAgc2NlbmU6IFNjZW5lXHJcbiAgYWN0aXZlOiBib29sZWFuXHJcbiAgc2l6ZTogbnVtYmVyXHJcbiAgcG9zaXRpb246IFZlY3RvcjJEXHJcbiAgYW5nbGU6IG51bWJlclxyXG4gIHJvdGF0aW9uU3BlZWQ6IG51bWJlclxyXG4gIHZlbG9jaXR5OiBWZWN0b3IyRFxyXG4gIHBvaW50czogQXJyYXk8VmVjdG9yMkQ+XHJcblxyXG4gIGNvbnN0cnVjdG9yKHNjZW5lOiBTY2VuZSwgeDogbnVtYmVyLCB5OiBudW1iZXIsIHNpemUgPSAyOClcclxuICB7XHJcbiAgICBjb25zdCBwb2ludHNPbkNpcmNsZSA9IChjb3VudDogbnVtYmVyLCB4OiBudW1iZXIsIHk6IG51bWJlciwgcmFkaXVzOiBudW1iZXIpOiBBcnJheTxWZWN0b3IyRD4gPT4ge1xyXG4gICAgICBjb25zdCBzdGFydEFuZ2xlOiBudW1iZXIgPSAwO1xyXG4gICAgICBjb25zdCBlbmRBbmdsZTogbnVtYmVyID0gNi4yODtcclxuXHJcbiAgICAgIGNvbnN0IGFuZ2xlU3RlcDogbnVtYmVyID0gKGVuZEFuZ2xlIC0gc3RhcnRBbmdsZSkgLyBjb3VudDtcclxuICAgICAgbGV0IGFuZ2xlOiBudW1iZXIgPSBzdGFydEFuZ2xlO1xyXG5cclxuICAgICAgY29uc3QgcG9pbnRzOiBBcnJheTxWZWN0b3IyRD4gPSBbXVxyXG4gICAgICBmb3IgKGxldCBpOiBudW1iZXIgPSAwOyBpIDwgY291bnQ7IGkrKylcclxuICAgICAge1xyXG4gICAgICAgIGNvbnN0IHBvaW50ID0gbmV3IFZlY3RvcjJEKFxyXG4gICAgICAgICAgeCArIChyYWRpdXMgKiBNYXRoLmNvcyhhbmdsZSkpLFxyXG4gICAgICAgICAgeSArIChyYWRpdXMgKiBNYXRoLnNpbihhbmdsZSkpXHJcbiAgICAgICAgKVxyXG5cclxuICAgICAgICBwb2ludHMucHVzaChwb2ludClcclxuICAgICAgICBhbmdsZSArPSBhbmdsZVN0ZXA7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBwb2ludHM7XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0IGNyZWF0ZVBvbHlnb25Qb2ludHMgPSAoeDogbnVtYmVyLCB5OiBudW1iZXIsIHI6IG51bWJlciA9IDIwLCB0b3RhbFBvaW50czogbnVtYmVyID0gOCk6IEFycmF5PFZlY3RvcjJEPiA9PiB7XHJcbiAgICAgIGNvbnN0IHBvaW50czogQXJyYXk8VmVjdG9yMkQ+ID0gcG9pbnRzT25DaXJjbGUodG90YWxQb2ludHMsIHgsIHksIHIpXHJcblxyXG4gICAgICBwb2ludHMuZm9yRWFjaChwb2ludCA9PiB7XHJcbiAgICAgICAgcG9pbnQueCArPSBSTkQuYmV0d2VlbigtKHIgKiAwLjI1KSwgciAqIDAuMjUpXHJcbiAgICAgICAgcG9pbnQueSArPSBSTkQuYmV0d2VlbigtKHIgKiAwLjI1KSwgciAqIDAuMjUpXHJcbiAgICAgIH0pXHJcblxyXG4gICAgICByZXR1cm4gcG9pbnRzXHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5zY2VuZSA9IHNjZW5lXHJcbiAgICB0aGlzLmFjdGl2ZSA9IHRydWVcclxuICAgIHRoaXMucG9zaXRpb24gPSBuZXcgVmVjdG9yMkQoeCwgeSlcclxuICAgIHRoaXMuc2l6ZSA9IHNpemVcclxuICAgIHRoaXMuYW5nbGUgPSAwXHJcbiAgICB0aGlzLnJvdGF0aW9uU3BlZWQgPSBSTkQuZmxvYXRCZXR3ZWVuKDAuMSwgMilcclxuICAgIHRoaXMudmVsb2NpdHkgPSBuZXcgVmVjdG9yMkQoUk5ELmJldHdlZW4oLTIwMCwgMjAwKSwgUk5ELmJldHdlZW4oLTIwMCwgMjAwKSlcclxuICAgIHRoaXMucG9pbnRzID0gY3JlYXRlUG9seWdvblBvaW50cygwLCAwLCB0aGlzLnNpemUsIDEyKVxyXG4gICAgLy8gY29uc29sZS5sb2codGhpcy5wb3NpdGlvbiwgdGhpcy52ZWxvY2l0eSlcclxuICB9XHJcblxyXG4gIGdldCByYWRpYW5zKCk6IG51bWJlclxyXG4gIHtcclxuICAgIHJldHVybiB0aGlzLmFuZ2xlICogTWF0aC5QSSAvIDE4MFxyXG4gIH1cclxuXHJcbiAgZ2V0Qm91bmRpbmdCb3goKTogQm94XHJcbiAge1xyXG4gICAgY29uc3QgeCA9IHRoaXMucG9zaXRpb24ueCArIHRoaXMuc2l6ZSAvIDJcclxuICAgIGNvbnN0IHkgPSB0aGlzLnBvc2l0aW9uLnkgKyB0aGlzLnNpemUgLyAyXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICB4LFxyXG4gICAgICB5LFxyXG4gICAgICB0b3A6IHkgLSB0aGlzLnNpemUsXHJcbiAgICAgIHJpZ2h0OiB4ICsgdGhpcy5zaXplLFxyXG4gICAgICBib3R0b206IHkgKyB0aGlzLnNpemUsXHJcbiAgICAgIGxlZnQ6IHggLSB0aGlzLnNpemUsXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB1cGRhdGUoZGVsdGE6IG51bWJlcilcclxuICB7XHJcbiAgICBjb25zdCBtb3ZlbWVudDogVmVjdG9yMkQgPSB0aGlzLnZlbG9jaXR5LmNsb25lKCkubXVsdGlwbHkoZGVsdGEsIGRlbHRhKVxyXG4gICAgdGhpcy5wb3NpdGlvbi5hZGQobW92ZW1lbnQpXHJcblxyXG4gICAgdGhpcy5wb3NpdGlvbi54ID0gTS53cmFwKHRoaXMucG9zaXRpb24ueCwgLSh0aGlzLnNpemUgKiAyKSwgdGhpcy5zY2VuZS53aWR0aCArICh0aGlzLnNpemUgKiAyKSlcclxuICAgIHRoaXMucG9zaXRpb24ueSA9IE0ud3JhcCh0aGlzLnBvc2l0aW9uLnksIC0odGhpcy5zaXplICogMiksIHRoaXMuc2NlbmUuaGVpZ2h0ICsgKHRoaXMuc2l6ZSAqIDIpKVxyXG5cclxuICAgIHRoaXMuYW5nbGUgKz0gdGhpcy5yb3RhdGlvblNwZWVkXHJcblxyXG4gICAgLy8gY29uc29sZS5sb2coYCR7dGhpcy5wb3NpdGlvbi54fSwgJHt0aGlzLnBvc2l0aW9uLnl9ICR7dGhpcy5hbmdsZX1gKVxyXG4gIH1cclxuXHJcbiAgcmVuZGVyKGNvbnRleHQ6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRClcclxuICB7XHJcbiAgICBjb250ZXh0LnNhdmUoKVxyXG4gICAgY29udGV4dC5zdHJva2VTdHlsZSA9ICcjYWFhYWFhJ1xyXG4gICAgY29udGV4dC5maWxsU3R5bGUgPSAnIzMzMzMzMydcclxuXHJcbiAgICBjb250ZXh0LnRyYW5zbGF0ZSh0aGlzLnBvc2l0aW9uLnggKyB0aGlzLnNpemUgLyAyLCB0aGlzLnBvc2l0aW9uLnkgKyB0aGlzLnNpemUgLyAyKVxyXG4gICAgY29udGV4dC5yb3RhdGUodGhpcy5yYWRpYW5zKVxyXG5cclxuICAgIGNvbnRleHQuYmVnaW5QYXRoKClcclxuICAgIGNvbnRleHQubW92ZVRvKHRoaXMucG9pbnRzWzBdLngsIHRoaXMucG9pbnRzWzBdLnkpXHJcblxyXG4gICAgZm9yIChsZXQgaW5kZXg6IG51bWJlciA9IDE7IGluZGV4IDwgdGhpcy5wb2ludHMubGVuZ3RoOyBpbmRleCsrKVxyXG4gICAge1xyXG4gICAgICBjb25zdCBwb2ludCA9IHRoaXMucG9pbnRzW2luZGV4XVxyXG4gICAgICBjb250ZXh0LmxpbmVUbyhwb2ludC54LCBwb2ludC55KVxyXG4gICAgfVxyXG4gICAgY29udGV4dC5jbG9zZVBhdGgoKVxyXG4gICAgY29udGV4dC5zdHJva2UoKVxyXG4gICAgY29udGV4dC5maWxsKClcclxuXHJcbiAgICAvLyBjZW50ZXIgcG9pbnRcclxuICAgIC8vIGNvbnRleHQuZmlsbFN0eWxlID0gJyNmZmZmZmYnXHJcbiAgICAvLyBjb250ZXh0LmZpbGxSZWN0KC0xLCAtMSwgMiwgMilcclxuXHJcbiAgICBjb250ZXh0LnNldFRyYW5zZm9ybSgxLCAwLCAwLCAxLCAwLCAwKVxyXG5cclxuICAgIGNvbnRleHQucmVzdG9yZSgpXHJcbiAgfVxyXG59IiwiaW1wb3J0IElucHV0IGZyb20gJy4vaW5wdXQnXHJcbmltcG9ydCBNIGZyb20gJy4vbWF0aCdcclxuaW1wb3J0IFNoaXAgZnJvbSAnLi9zaGlwJ1xyXG5pbXBvcnQgQnVsbGV0IGZyb20gJy4vYnVsbGV0J1xyXG5pbXBvcnQgUGFydGljbGUgZnJvbSAnLi9wYXJ0aWNsZSdcclxuaW1wb3J0IFJvY2sgZnJvbSAnLi9yb2NrJ1xyXG5pbXBvcnQgU3RhckJhY2tncm91bmQgZnJvbSAnLi9zdGFyYmFja2dyb3VuZCdcclxuaW1wb3J0IFJORCBmcm9tICcuL3JuZCdcclxuaW1wb3J0IFZlY3RvcjJEIGZyb20gJy4vdmVjdG9yMmQnXHJcbmltcG9ydCB7IEdhbWVPYmplY3QsIEJveCB9IGZyb20gJy4vZ2FtZW9iamVjdCdcclxuXHJcbmNvbnN0IE1BWF9ST0NLX0NPVU5UOiBudW1iZXIgPSAxMFxyXG5cclxuY2xhc3MgT2JqZWN0UG9vbDxUPlxyXG57XHJcbiAgaXRlbXM6IEFycmF5PFQ+XHJcblxyXG4gIGNvbnN0cnVjdG9yKClcclxuICB7XHJcbiAgICB0aGlzLml0ZW1zID0gW11cclxuICB9XHJcbn1cclxuXHJcbnR5cGUgQ29sbGlzaW9uQ2FsbGJhY2tGbiA9IChhOiBHYW1lT2JqZWN0LCBiOiBHYW1lT2JqZWN0KSA9PiBib29sZWFuXHJcblxyXG5cclxuY2xhc3MgQ29sbGlkZXJcclxue1xyXG4gIHJlYWRvbmx5IGE6IEdhbWVPYmplY3RbXVxyXG4gIHJlYWRvbmx5IGI6IEdhbWVPYmplY3RbXVxyXG4gIHJlYWRvbmx5IGNhbGxiYWNrOiBDb2xsaXNpb25DYWxsYmFja0ZuXHJcblxyXG4gIGNvbnN0cnVjdG9yKGE6IEdhbWVPYmplY3RbXSwgYjogR2FtZU9iamVjdFtdLCBjYWxsYmFjazogQ29sbGlzaW9uQ2FsbGJhY2tGbilcclxuICB7XHJcbiAgICB0aGlzLmEgPSBhXHJcbiAgICB0aGlzLmIgPSBiXHJcbiAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2tcclxuICB9XHJcblxyXG4gIGNoZWNrKCk6IEdhbWVPYmplY3RbXVxyXG4gIHtcclxuICAgIGNvbnN0IG92ZXJsYXBzID0gKGE6IEdhbWVPYmplY3QsIGI6IEdhbWVPYmplY3QpID0+IHtcclxuICAgICAgY29uc3QgYUJveDogQm94ICA9IGEuZ2V0Qm91bmRpbmdCb3goKVxyXG4gICAgICBjb25zdCBiQm94OiBCb3ggPSBiLmdldEJvdW5kaW5nQm94KClcclxuXHJcbiAgICAgIGNvbnN0IG92ZXJsYXAgPSAhKFxyXG4gICAgICAgIGFCb3gucmlnaHQgPD0gYkJveC5sZWZ0IHx8XHJcbiAgICAgICAgYUJveC5ib3R0b20gPD0gYkJveC50b3AgfHxcclxuICAgICAgICBhQm94LnggPj0gYkJveC5yaWdodCB8fFxyXG4gICAgICAgIGFCb3gueSA+PSBiQm94LmJvdHRvbVxyXG4gICAgICApXHJcblxyXG4gICAgICByZXR1cm4gb3ZlcmxhcFxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuYS5mb3JFYWNoKGEgPT4ge1xyXG4gICAgICBpZiAoYS5hY3RpdmUpXHJcbiAgICAgIHtcclxuICAgICAgICB0aGlzLmIuZm9yRWFjaChiID0+IHtcclxuICAgICAgICAgIGlmIChiLmFjdGl2ZSlcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgaWYgKG92ZXJsYXBzKGEsIGIpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgdGhpcy5jYWxsYmFjayhhLCBiKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgfVxyXG4gICAgfSlcclxuXHJcbiAgICByZXR1cm4gW11cclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNjZW5lXHJcbntcclxuICBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50XHJcbiAgY29udGV4dDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEIHwgbnVsbFxyXG4gIGlucHV0OiBJbnB1dFxyXG4gIGRpc3BsYXlMaXN0OiBBcnJheTxhbnk+XHJcblxyXG4gIHNoaXA6IFNoaXAgfCBudWxsXHJcbiAgcm9ja3M6IEFycmF5PFJvY2s+XHJcbiAgYnVsbGV0czogQXJyYXk8QnVsbGV0PlxyXG4gIHBhcnRpY2FsczogQXJyYXk8UGFydGljbGU+XHJcbiAgY29sbGlkZXJzOiBDb2xsaWRlcltdXHJcblxyXG4gIGNvbnN0cnVjdG9yKGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQpXHJcbiAge1xyXG4gICAgdGhpcy5jYW52YXMgPSBjYW52YXNcclxuICAgIHRoaXMuY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpXHJcbiAgICB0aGlzLmlucHV0ID0gbmV3IElucHV0KHRoaXMuY2FudmFzKVxyXG4gICAgdGhpcy5kaXNwbGF5TGlzdCA9IFtdXHJcblxyXG4gICAgdGhpcy5zaGlwID0gbnVsbFxyXG4gICAgdGhpcy5yb2NrcyA9IFtdXHJcbiAgICB0aGlzLmJ1bGxldHMgPSBbXVxyXG4gICAgdGhpcy5wYXJ0aWNhbHMgPSBbXVxyXG4gICAgdGhpcy5jb2xsaWRlcnMgPSBbXVxyXG4gIH1cclxuXHJcbiAgZ2V0IHdpZHRoKCk6IG51bWJlclxyXG4gIHtcclxuICAgIHJldHVybiB0aGlzLmNhbnZhcy53aWR0aFxyXG4gIH1cclxuXHJcbiAgZ2V0IGhlaWdodCgpOiBudW1iZXJcclxuICB7XHJcbiAgICByZXR1cm4gdGhpcy5jYW52YXMuaGVpZ2h0XHJcbiAgfVxyXG5cclxuICBhZGRHYW1lT2JqZWN0KG9iajogb2JqZWN0LCBiZWZvcmU6IG9iamVjdCB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZCwgYWZ0ZXI6IG9iamVjdCB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZCk6IHZvaWRcclxuICB7XHJcbiAgICBpZiAoYmVmb3JlKVxyXG4gICAge1xyXG4gICAgICBjb25zdCBpbmRleCA9IHRoaXMuZGlzcGxheUxpc3QuaW5kZXhPZihiZWZvcmUpXHJcbiAgICAgIHRoaXMuZGlzcGxheUxpc3Quc3BsaWNlKGluZGV4IC0gMSwgMCwgb2JqKVxyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoYWZ0ZXIpXHJcbiAgICB7XHJcbiAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5kaXNwbGF5TGlzdC5pbmRleE9mKGFmdGVyKVxyXG4gICAgICB0aGlzLmRpc3BsYXlMaXN0LnNwbGljZShpbmRleCwgMCwgb2JqKVxyXG4gICAgfVxyXG4gICAgZWxzZVxyXG4gICAge1xyXG4gICAgICB0aGlzLmRpc3BsYXlMaXN0LnB1c2gob2JqKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYWRkQ29sbGlkZXIoYTogR2FtZU9iamVjdCB8IEdhbWVPYmplY3RbXSwgYjogR2FtZU9iamVjdCB8IEdhbWVPYmplY3RbXSwgY2FsbGJhY2s6IENvbGxpc2lvbkNhbGxiYWNrRm4pXHJcbiAge1xyXG4gICAgYSA9IEFycmF5LmlzQXJyYXkoYSkgPyBhIDogWyBhIF1cclxuICAgIGIgPSBBcnJheS5pc0FycmF5KGIpID8gYiA6IFsgYiBdXHJcbiAgICBjb25zdCBjb2xsaWRlciA9IG5ldyBDb2xsaWRlcihhLCBiLCBjYWxsYmFjaylcclxuICAgIHRoaXMuY29sbGlkZXJzLnB1c2goY29sbGlkZXIpXHJcbiAgICByZXR1cm4gY29sbGlkZXJcclxuICB9XHJcblxyXG4gIGRlc3Ryb3lHYW1lT2JqZWN0KG9iajogYW55KTogdm9pZFxyXG4gIHtcclxuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5kaXNwbGF5TGlzdC5pbmRleE9mKG9iailcclxuXHJcbiAgICBpZiAob2JqLnBvb2xlZClcclxuICAgIHtcclxuICAgICAgb2JqLmFjdGl2ZSA9IGZhbHNlXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGluZGV4ID49IDApXHJcbiAgICB7XHJcbiAgICAgIHRoaXMuZGlzcGxheUxpc3Quc3BsaWNlKGluZGV4LCAxKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY3JlYXRlKClcclxuICB7XHJcbiAgICB0aGlzLnNoaXAgPSBuZXcgU2hpcCh0aGlzLCB0aGlzLndpZHRoIC8gMiwgdGhpcy5oZWlnaHQgLyAyKVxyXG5cclxuICAgIHRoaXMuYWRkR2FtZU9iamVjdChuZXcgU3RhckJhY2tncm91bmQodGhpcykpXHJcblxyXG4gICAgLy8gQ3JlYXRlIHJvY2tzXHJcbiAgICBmb3IgKGxldCBjb3VudDogbnVtYmVyID0gMDsgY291bnQgPCBNQVhfUk9DS19DT1VOVDsgY291bnQrKylcclxuICAgIHtcclxuICAgICAgY29uc3Qgcm9jazogUm9jayA9IG5ldyBSb2NrKHRoaXMsIFJORC5iZXR3ZWVuKDAsIHRoaXMud2lkdGgpLCBSTkQuYmV0d2VlbigwLCB0aGlzLmhlaWdodCkpXHJcbiAgICAgIHRoaXMuYWRkR2FtZU9iamVjdChyb2NrKVxyXG4gICAgICB0aGlzLnJvY2tzLnB1c2gocm9jaylcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmFkZEdhbWVPYmplY3QodGhpcy5zaGlwKVxyXG5cclxuICAgIHRoaXMuYWRkQ29sbGlkZXIodGhpcy5zaGlwLCB0aGlzLnJvY2tzLCB0aGlzLm9uU2hpcENyYXNoLmJpbmQodGhpcykpXHJcbiAgICB0aGlzLmFkZENvbGxpZGVyKHRoaXMuYnVsbGV0cywgdGhpcy5yb2NrcywgdGhpcy5vbkJ1bGxldEhpdFJvY2suYmluZCh0aGlzKSlcclxuICB9XHJcblxyXG4gIGRlc3Ryb3koKVxyXG4gIHtcclxuICAgIHRoaXMuaW5wdXQuZGVzdHJveSgpXHJcbiAgfVxyXG5cclxuICB1cGRhdGUoZGVsdGE6IG51bWJlcilcclxuICB7XHJcbiAgICAvLyBUdXJuIHNoaXAgdG93YXJkcyB0aGUgcG9pbnRlciBsb2NhdGlvblxyXG4gICAgY29uc3Qgc2hpcCA9IHRoaXMuc2hpcCBhcyBTaGlwXHJcblxyXG4gICAgaWYgKHRoaXMuaW5wdXQuY2hhbmdlZClcclxuICAgIHtcclxuICAgICAgc2hpcC50dXJuKHRoaXMuaW5wdXQudHVybilcclxuICAgICAgc2hpcC50dXJuVG8obnVsbClcclxuXHJcbiAgICAgIGlmICgxID09PSB0aGlzLmlucHV0LmFjY2VsZXJhdGUpXHJcbiAgICAgIHtcclxuICAgICAgICBzaGlwLmFjY2VsZXJhdGUoKVxyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYgKC0xID09PSB0aGlzLmlucHV0LmFjY2VsZXJhdGUpXHJcbiAgICAgIHtcclxuICAgICAgICBzaGlwLmJyYWtlKClcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmICh0cnVlID09PSB0aGlzLmlucHV0LnNob290KVxyXG4gICAgICB7XHJcbiAgICAgICAgaWYgKHNoaXAuZmlyZSgpKVxyXG4gICAgICAgIHtcclxuICAgICAgICAgIGNvbnN0IHZlbG9jaXR5ID0gbmV3IFZlY3RvcjJEKDYwMCwgMClcclxuICAgICAgICAgIC8vIHZlbG9jaXR5LnNldFRvUG9sYXIoODAwLCBzaGlwLnJhZGlhbnMpXHJcbiAgICAgICAgICB2ZWxvY2l0eS5yb3RhdGUoc2hpcC5yYWRpYW5zKVxyXG4gICAgICAgICAgY29uc3QgYnVsbGV0ID0gbmV3IEJ1bGxldCh0aGlzLCBzaGlwLnBvc2l0aW9uLngsIHNoaXAucG9zaXRpb24ueSwgdmVsb2NpdHkpXHJcbiAgICAgICAgICB0aGlzLmJ1bGxldHMucHVzaChidWxsZXQpXHJcbiAgICAgICAgICB0aGlzLmFkZEdhbWVPYmplY3QoYnVsbGV0LCBzaGlwKVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICB0aGlzLmlucHV0LmNoYW5nZWQgPSBmYWxzZVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLmlucHV0LnR1cm5Ub01vdXNlICYmIHRoaXMuaW5wdXQucG9pbnRlci5pbilcclxuICAgIHtcclxuICAgICAgY29uc3QgYW5nbGUgPSBNLkFuZ2xlLmJldHdlZW4oc2hpcC5wb3NpdGlvbiwgdGhpcy5pbnB1dC5wb2ludGVyKVxyXG4gICAgICBzaGlwLnR1cm5UbyhhbmdsZSlcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmNvbGxpZGVycy5mb3JFYWNoKGNvbGxpZGVyID0+IHtcclxuICAgICAgY29sbGlkZXIuY2hlY2soKVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIHJlbmRlcihkZWx0YTogbnVtYmVyKTogdm9pZFxyXG4gIHtcclxuICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLmNvbnRleHQgYXMgQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEXHJcbiAgICBjb250ZXh0LmNsZWFyUmVjdCgwLCAwLCB0aGlzLmNhbnZhcy53aWR0aCwgdGhpcy5jYW52YXMuaGVpZ2h0KVxyXG5cclxuICAgIHRoaXMuZGlzcGxheUxpc3QuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgaXRlbS51cGRhdGUoZGVsdGEpXHJcbiAgICAgIGl0ZW0ucmVuZGVyKHRoaXMuY29udGV4dClcclxuICAgIH0pXHJcblxyXG4gICAgY29uc3Qgc2hpcCA9IHRoaXMuc2hpcCBhcyBTaGlwXHJcblxyXG4gICAgY29udGV4dC5maWxsU3R5bGUgPSAnI2ZmZmZmZidcclxuICAgIGNvbnRleHQuZmlsbFRleHQoYCR7dGhpcy5pbnB1dC5wb2ludGVyLngudG9GaXhlZCgyKX0sICR7dGhpcy5pbnB1dC5wb2ludGVyLnkudG9GaXhlZCgyKX07ICR7c2hpcC5yYWRpYW5zLnRvRml4ZWQoMil9LCAke00uQW5nbGUudG9SYWRpYW5zKHNoaXAucm90YXRlVG8gfHwgMCkudG9GaXhlZCgyKX0gJHtzaGlwLnJvdGF0aW9uU3BlZWQudG9GaXhlZCgyKX07ICR7c2hpcC5zcGVlZC50b0ZpeGVkKDIpfSAke3NoaXAudmVsb2NpdHkueC50b0ZpeGVkKDIpfSwgJHtzaGlwLnZlbG9jaXR5LnkudG9GaXhlZCgyKX07ICR7c2hpcC53ZWFwb25Db29sZG93bi50b0ZpeGVkKDIpfWAsIDEwLCAxMClcclxuICAgIGNvbnRleHQuZmlsbFRleHQoYENvbnRyb2xzICR7dGhpcy5pbnB1dC5hY2NlbGVyYXRlfSwgJHt0aGlzLmlucHV0LnR1cm59LCAke3RoaXMuaW5wdXQuc2hvb3R9YCwgMTAsIDIwKVxyXG4gICAgY29udGV4dC5maWxsVGV4dChgUmVuZGVyZXIgJHt0aGlzLmRpc3BsYXlMaXN0Lmxlbmd0aH1gLCAxMCwgMzApXHJcblxyXG5cclxuICAgIC8vIGRlYnVnXHJcbiAgICAvLyB0aGlzLmRpc3BsYXlMaXN0LmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAvLyAgIGlmIChpdGVtLmdldEJvdW5kaW5nQm94KVxyXG4gICAgLy8gICB7XHJcbiAgICAvLyAgICAgY29uc3QgYm94ID0gaXRlbS5nZXRCb3VuZGluZ0JveCgpXHJcbiAgICAvLyAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9ICdwdXJwbGUnXHJcbiAgICAvLyAgICAgY29udGV4dC5zdHJva2VSZWN0KGJveC5sZWZ0LCBib3gudG9wLCBib3gucmlnaHQgLSBib3gubGVmdCwgYm94LmJvdHRvbSAtIGJveC50b3ApXHJcbiAgICAvLyAgIH1cclxuICAgIC8vIH0pXHJcbiAgfVxyXG5cclxuICBvblNoaXBDcmFzaChzaGlwOiBHYW1lT2JqZWN0LCByb2NrOiBHYW1lT2JqZWN0KTogYm9vbGVhblxyXG4gIHtcclxuICAgIHNoaXAgPSBzaGlwIGFzIFNoaXBcclxuXHJcbiAgICAvLyBjb25zb2xlLmxvZyhcIlNoaXAgZGFtYWdlZCFcIilcclxuXHJcbiAgICByZXR1cm4gdHJ1ZVxyXG4gIH1cclxuXHJcbiAgb25CdWxsZXRIaXRSb2NrKGJ1bGxldDogR2FtZU9iamVjdCwgcm9jazogR2FtZU9iamVjdCk6IGJvb2xlYW5cclxuICB7XHJcbiAgICB0aGlzLmRlc3Ryb3lHYW1lT2JqZWN0KGJ1bGxldClcclxuICAgIGNvbnN0IGJ1bGxldEluZGV4ID0gdGhpcy5idWxsZXRzLmluZGV4T2YoYnVsbGV0IGFzIEJ1bGxldClcclxuICAgIHRoaXMuYnVsbGV0cy5zcGxpY2UoYnVsbGV0SW5kZXgsIDEpXHJcblxyXG4gICAgY29uc3QgYVJvY2s6IFJvY2sgPSByb2NrIGFzIFJvY2tcclxuICAgIHRoaXMuZGVzdHJveUdhbWVPYmplY3Qocm9jaylcclxuICAgIGNvbnN0IHJvY2tJbmRleCA9IHRoaXMucm9ja3MuaW5kZXhPZihhUm9jaylcclxuICAgIHRoaXMucm9ja3Muc3BsaWNlKHJvY2tJbmRleCwgMSlcclxuXHJcbiAgICBpZiAoYVJvY2suc2l6ZSA+IDgpXHJcbiAgICB7XHJcbiAgICAgIC8vIHNwYXduIHR3byByb2NrcywgaGFsZiB0aGUgc2l6ZVxyXG4gICAgICBjb25zdCBzaXplID0gTWF0aC5tYXgoYVJvY2suc2l6ZSAvIDIsIDgpXHJcbiAgICAgIGNvbnN0IHJvY2tzOiBSb2NrW10gPSBbXHJcbiAgICAgICAgbmV3IFJvY2sodGhpcywgcm9jay5wb3NpdGlvbi54LCByb2NrLnBvc2l0aW9uLnksIHNpemUpLFxyXG4gICAgICAgIG5ldyBSb2NrKHRoaXMsIHJvY2sucG9zaXRpb24ueCwgcm9jay5wb3NpdGlvbi55LCBzaXplKVxyXG4gICAgICBdXHJcblxyXG4gICAgICByb2Nrcy5mb3JFYWNoKHJvY2sgPT4ge1xyXG4gICAgICAgIHRoaXMuYWRkR2FtZU9iamVjdChyb2NrKVxyXG4gICAgICAgIHRoaXMucm9ja3MucHVzaChyb2NrKVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdHJ1ZVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgU2NlbmUgZnJvbSAnLi9zY2VuZSdcclxuaW1wb3J0IHsgQm94LCBHYW1lT2JqZWN0IH0gZnJvbSAnLi9nYW1lb2JqZWN0J1xyXG5pbXBvcnQgVmVjdG9yMkQgZnJvbSAnLi92ZWN0b3IyZCdcclxuaW1wb3J0IE0gZnJvbSAnLi9tYXRoJ1xyXG5cclxuY29uc3QgU0hJUF9NQVhJTVVNX1NQRUVEID0gNTAwXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTaGlwIGltcGxlbWVudHMgR2FtZU9iamVjdFxyXG57XHJcbiAgc2NlbmU6IFNjZW5lXHJcbiAgYWN0aXZlOiBib29sZWFuXHJcbiAgcG9zaXRpb246IFZlY3RvcjJEXHJcbiAgdmVsb2NpdHk6IFZlY3RvcjJEXHJcbiAgLyoqIEFuZ2xlIGluIGRlZ3JlZXMgKi9cclxuICBfYW5nbGU6IG51bWJlclxyXG4gIF9zcGVlZDogbnVtYmVyXHJcbiAgc2l6ZTogbnVtYmVyXHJcblxyXG4gIHJvdGF0ZVRvOiBudW1iZXIgfCBudWxsXHJcbiAgcm90YXRpb25TcGVlZDogbnVtYmVyXHJcblxyXG4gIHdlYXBvbkNvb2xkb3duOiBudW1iZXJcclxuXHJcbiAgY29uc3RydWN0b3Ioc2NlbmU6IFNjZW5lLCB4OiBudW1iZXIsIHk6IG51bWJlciwgc2l6ZTogbnVtYmVyID0gMjApXHJcbiAge1xyXG4gICAgdGhpcy5zY2VuZSA9IHNjZW5lXHJcbiAgICB0aGlzLmFjdGl2ZSA9IHRydWVcclxuICAgIHRoaXMucG9zaXRpb24gPSBuZXcgVmVjdG9yMkQoeCwgeSlcclxuICAgIHRoaXMudmVsb2NpdHkgPSBuZXcgVmVjdG9yMkQoMCwgMClcclxuICAgIHRoaXMuc2l6ZSA9IHNpemVcclxuICAgIHRoaXMuX2FuZ2xlID0gMFxyXG4gICAgdGhpcy5fc3BlZWQgPSAwXHJcblxyXG4gICAgdGhpcy5yb3RhdGVUbyA9IG51bGxcclxuICAgIHRoaXMucm90YXRpb25TcGVlZCA9IDBcclxuXHJcbiAgICB0aGlzLndlYXBvbkNvb2xkb3duID0gMFxyXG4gIH1cclxuXHJcbiAgLy8gY29udHJvbCBpbnRlcmZhY2VcclxuICAvKipcclxuICAgKlxyXG4gICAqIEBwYXJhbSBkaXJlY3Rpb24gcG9zaXRpdmUgcmlnaHQsIG5lZ2F0aXZlIGxlZnRcclxuICAgKi9cclxuICB0dXJuKGRpcmVjdGlvbjogbnVtYmVyKVxyXG4gIHtcclxuICAgIHN3aXRjaCAoZGlyZWN0aW9uKVxyXG4gICAge1xyXG4gICAgICBjYXNlIC0xOlxyXG4gICAgICB7XHJcbiAgICAgICAgdGhpcy5yb3RhdGlvblNwZWVkID0gLTFcclxuICAgICAgICBicmVha1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgMDpcclxuICAgICAge1xyXG4gICAgICAgIHRoaXMucm90YXRpb25TcGVlZCA9IDBcclxuICAgICAgICBicmVha1xyXG4gICAgICB9XHJcbiAgICAgIGNhc2UgMTpcclxuICAgICAge1xyXG4gICAgICAgIHRoaXMucm90YXRpb25TcGVlZCA9IDFcclxuICAgICAgICBicmVha1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKlxyXG4gICAqIEBwYXJhbSBhbmdsZSB0YXJnZXQgYW5nbGUgaW4gZGVncmVlc1xyXG4gICAqL1xyXG4gIHR1cm5UbyhhbmdsZTogbnVtYmVyIHwgbnVsbClcclxuICB7XHJcbiAgICB0aGlzLnJvdGF0ZVRvID0gYW5nbGVcclxuICB9XHJcblxyXG4gIGFjY2VsZXJhdGUoKVxyXG4gIHtcclxuICAgIHRoaXMuc3BlZWQgKz0gNVxyXG5cclxuICAgIHRoaXMudmVsb2NpdHkuYWRkKHRoaXMuc3BlZWQsIHRoaXMuc3BlZWQpXHJcbiAgICB0aGlzLnZlbG9jaXR5LnNldFRvUG9sYXIodGhpcy5yYWRpYW5zLCB0aGlzLnNwZWVkKVxyXG4gIH1cclxuXHJcbiAgYnJha2UoKVxyXG4gIHtcclxuICAgIHRoaXMuc3BlZWQgLT0gNVxyXG4gIH1cclxuXHJcbiAgZmlyZSgpXHJcbiAge1xyXG4gICAgY29uc3Qgb2sgPSB0aGlzLndlYXBvbkNvb2xkb3duID09PSAwXHJcbiAgICBpZiAob2spXHJcbiAgICB7XHJcbiAgICAgIHRoaXMud2VhcG9uQ29vbGRvd24gPSAuMTI1XHJcbiAgICB9XHJcbiAgICByZXR1cm4gb2tcclxuICB9XHJcblxyXG4gIGdldCBzcGVlZCgpOiBudW1iZXJcclxuICB7XHJcbiAgICByZXR1cm4gdGhpcy5fc3BlZWRcclxuICB9XHJcblxyXG4gIGdldCBhbmdsZSgpOiBudW1iZXJcclxuICB7XHJcbiAgICByZXR1cm4gdGhpcy5fYW5nbGVcclxuICB9XHJcblxyXG4gIGdldCByYWRpYW5zKCk6IG51bWJlclxyXG4gIHtcclxuICAgIHJldHVybiBNLkFuZ2xlLnRvUmFkaWFucyh0aGlzLmFuZ2xlKVxyXG4gIH1cclxuXHJcbiAgc2V0IHNwZWVkKHNwZWVkOiBudW1iZXIpXHJcbiAge1xyXG4gICAgdGhpcy5fc3BlZWQgPSBNLmNsYW1wKHNwZWVkLCAwLCBTSElQX01BWElNVU1fU1BFRUQpXHJcbiAgfVxyXG5cclxuICBzZXQgYW5nbGUoYW5nbGU6IG51bWJlcilcclxuICB7XHJcbiAgICB0aGlzLl9hbmdsZSA9IGFuZ2xlIC8vIE0ud3JhcChhbmdsZSwgMCwgMzYwKVxyXG4gIH1cclxuXHJcbiAgZ2V0Qm91bmRpbmdCb3goKTogQm94XHJcbiAge1xyXG4gICAgY29uc3QgeCA9IHRoaXMucG9zaXRpb24ueFxyXG4gICAgY29uc3QgeSA9IHRoaXMucG9zaXRpb24ueVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgeCxcclxuICAgICAgeSxcclxuICAgICAgdG9wOiB5IC0gdGhpcy5zaXplIC8gMixcclxuICAgICAgcmlnaHQ6IHggKyB0aGlzLnNpemUsXHJcbiAgICAgIGJvdHRvbTogeSArIHRoaXMuc2l6ZSAvIDIsXHJcbiAgICAgIGxlZnQ6IHggLSB0aGlzLnNpemUgLyAyLFxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdXBkYXRlKGRlbHRhOiBudW1iZXIpOiB2b2lkXHJcbiAge1xyXG4gICAgLy8gdXBkYXRlIGFuZ2xlIGJ5IHR1cm4gc3BlZWRcclxuICAgIGlmICh0aGlzLnJvdGF0aW9uU3BlZWQgIT0gMClcclxuICAgIHtcclxuICAgICAgdGhpcy5hbmdsZSArPSB0aGlzLnJvdGF0aW9uU3BlZWRcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHRoaXMucm90YXRlVG8gIT0gbnVsbClcclxuICAgIHtcclxuICAgICAgdGhpcy5hbmdsZSA9IE0uQW5nbGUudG9EZWdyZWVzKE0uQW5nbGUucm90YXRlVG8odGhpcy5yYWRpYW5zLCBNLkFuZ2xlLnRvUmFkaWFucyh0aGlzLnJvdGF0ZVRvKSkpXHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy53ZWFwb25Db29sZG93biA9IE0uZGVjKHRoaXMud2VhcG9uQ29vbGRvd24sIGRlbHRhLCAwKVxyXG5cclxuICAgIC8vIHVwZGF0ZSB2ZWxvY2l0eSBieSBzcGVlZFxyXG4gICAgY29uc3QgdmVsb2NpdHkgPSB0aGlzLnZlbG9jaXR5LmNsb25lKCkubXVsdGlwbHkoZGVsdGEsIGRlbHRhKVxyXG4gICAgdGhpcy5wb3NpdGlvbi5hZGQodmVsb2NpdHkpXHJcblxyXG4gICAgdGhpcy5wb3NpdGlvbi54ID0gTS53cmFwKHRoaXMucG9zaXRpb24ueCwgLSh0aGlzLnNpemUgKiAyKSwgdGhpcy5zY2VuZS5jYW52YXMud2lkdGggKyAodGhpcy5zaXplICogMikpXHJcbiAgICB0aGlzLnBvc2l0aW9uLnkgPSBNLndyYXAodGhpcy5wb3NpdGlvbi55LCAtKHRoaXMuc2l6ZSAqIDIpLCB0aGlzLnNjZW5lLmNhbnZhcy5oZWlnaHQgKyAodGhpcy5zaXplICogMikpXHJcbiAgfVxyXG5cclxuICByZW5kZXIoY29udGV4dDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKTogdm9pZFxyXG4gIHtcclxuICAgIGNvbnN0IHBvaW50czogQXJyYXk8VmVjdG9yMkQ+ID0gW1xyXG4gICAgICBuZXcgVmVjdG9yMkQodGhpcy5zaXplLCAwKSxcclxuICAgICAgbmV3IFZlY3RvcjJEKC0odGhpcy5zaXplIC8gMiksIHRoaXMuc2l6ZSAvIDIpLFxyXG4gICAgICBuZXcgVmVjdG9yMkQoLSh0aGlzLnNpemUgLyAyKSwgLSh0aGlzLnNpemUgLyAyKSksXHJcbiAgICBdXHJcblxyXG4gICAgY29udGV4dC5zYXZlKClcclxuICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSAnI2FhYWFhYSdcclxuICAgIGNvbnRleHQuZmlsbFN0eWxlID0gJyM5OTk5OTknXHJcblxyXG4gICAgLy8gY29udGV4dC50cmFuc2xhdGUodGhpcy5wb3NpdGlvbi54ICsgKHRoaXMuc2l6ZSAvIDIpLCB0aGlzLnBvc2l0aW9uLnkgKyAodGhpcy5zaXplIC8gMikpXHJcbiAgICBjb250ZXh0LnRyYW5zbGF0ZSh0aGlzLnBvc2l0aW9uLngsIHRoaXMucG9zaXRpb24ueSlcclxuICAgIGNvbnRleHQucm90YXRlKHRoaXMucmFkaWFucylcclxuXHJcbiAgICBjb250ZXh0LmJlZ2luUGF0aCgpXHJcbiAgICBjb250ZXh0Lm1vdmVUbyhwb2ludHNbMF0ueCwgcG9pbnRzWzBdLnkpXHJcbiAgICBjb250ZXh0LmxpbmVUbyhwb2ludHNbMV0ueCwgcG9pbnRzWzFdLnkpXHJcbiAgICBjb250ZXh0LmxpbmVUbyhwb2ludHNbMl0ueCwgcG9pbnRzWzJdLnkpXHJcbiAgICBjb250ZXh0LmNsb3NlUGF0aCgpXHJcbiAgICBjb250ZXh0LnN0cm9rZSgpXHJcbiAgICBjb250ZXh0LmZpbGwoKVxyXG5cclxuICAgIC8vIGNlbnRlciBwb2ludFxyXG4gICAgLy8gY29udGV4dC5maWxsU3R5bGUgPSAnI2ZmZmZmZidcclxuICAgIC8vIGNvbnRleHQuZmlsbFJlY3QoLTEsIC0xLCAyLCAyKVxyXG5cclxuICAgIGNvbnRleHQuc2V0VHJhbnNmb3JtKDEsIDAsIDAsIDEsIDAsIDApXHJcbiAgICBjb250ZXh0LnJlc3RvcmUoKVxyXG4gIH1cclxufSIsImltcG9ydCBTY2VuZSBmcm9tICcuL3NjZW5lJ1xyXG5pbXBvcnQgUk5EIGZyb20gJy4vcm5kJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU3RhckJhY2tncm91bmRcclxue1xyXG4gIHNjZW5lOiBTY2VuZVxyXG4gIHN0YXJzOiBBcnJheTxhbnk+XHJcblxyXG4gIGNvbnN0cnVjdG9yKHNjZW5lOiBTY2VuZSlcclxuICB7XHJcbiAgICB0aGlzLnNjZW5lID0gc2NlbmVcclxuICAgIHRoaXMuc3RhcnMgPSBbXVxyXG4gICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IDMwMDsgaW5kZXgrKylcclxuICAgIHtcclxuICAgICAgY29uc3Qgc2l6ZSA9IFJORC5iZXR3ZWVuKDEsIDIpXHJcbiAgICAgIGNvbnN0IGFscGhhID0gUk5ELmZsb2F0QmV0d2VlbigwLjEsIDEpXHJcbiAgICAgIGNvbnN0IHggPSBSTkQuYmV0d2VlbigwLCBzY2VuZS53aWR0aClcclxuICAgICAgY29uc3QgeSA9IFJORC5iZXR3ZWVuKDAsIHNjZW5lLmhlaWdodClcclxuICAgICAgY29uc3QgY29sb3IgPSBSTkQucGljayhbICcyNTUsIDI1NSwgMjU1JywgJzEyOCwgMCwgMTI4JywgJzM0LCAzNCwgMTUzJyBdKVxyXG4gICAgICAvLyBjb25zdCBjb2xvciA9IHBpY2soWyAweGZmZmZmZiwgMHg4MDAwODAsIDB4MjIyMjk5IF0pXHJcblxyXG4gICAgICB0aGlzLnN0YXJzLnB1c2goe1xyXG4gICAgICAgIHgsXHJcbiAgICAgICAgeSxcclxuICAgICAgICBzaXplLFxyXG4gICAgICAgIGNvbG9yLFxyXG4gICAgICAgIGFscGhhXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB1cGRhdGUoZGVsdGE6IG51bWJlcik6IHZvaWRcclxuICB7XHJcbiAgICAvLyBUT0RPIGNoYW5nZSB0aGUgc3RhcnRzIGEgbGl0dGxlXHJcbiAgfVxyXG5cclxuICByZW5kZXIoKTogdm9pZFxyXG4gIHtcclxuICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLnNjZW5lLmNvbnRleHQgYXMgQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEXHJcblxyXG4gICAgY29udGV4dC5zYXZlKClcclxuXHJcbiAgICB0aGlzLnN0YXJzLmZvckVhY2goc3RhciA9PiB7XHJcbiAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gYHJnYmEoJHtzdGFyLmNvbG9yfSwgJHtzdGFyLmFscGhhfSlgXHJcbiAgICAgIGNvbnRleHQuZmlsbFJlY3Qoc3Rhci54LCBzdGFyLnksIHN0YXIuc2l6ZSwgc3Rhci5zaXplKVxyXG4gICAgfSlcclxuXHJcbiAgICBjb250ZXh0LnJlc3RvcmUoKVxyXG4gIH1cclxufVxyXG4iLCJcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmVjdG9yMkRcclxue1xyXG4gIHg6IG51bWJlclxyXG4gIHk6IG51bWJlclxyXG5cclxuICBjb25zdHJ1Y3Rvcih4OiBudW1iZXIgPSAwLCB5OiBudW1iZXIgPSAwKVxyXG4gIHtcclxuICAgIHRoaXMueCA9IHhcclxuICAgIHRoaXMueSA9IHlcclxuICB9XHJcblxyXG4gIGNsb25lKCk6IFZlY3RvcjJEXHJcbiAge1xyXG4gICAgcmV0dXJuIG5ldyBWZWN0b3IyRCh0aGlzLngsIHRoaXMueSlcclxuICB9XHJcblxyXG4gIHNldCh4OiBudW1iZXIsIHk6IG51bWJlcik6IHZvaWRcclxuICB7XHJcbiAgICB0aGlzLnggPSB4XHJcbiAgICB0aGlzLnkgPSB5XHJcbiAgfVxyXG5cclxuICBhZGQoeDogbnVtYmVyIHwgVmVjdG9yMkQsIHk6IG51bWJlciB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZCk6IHRoaXNcclxuICB7XHJcbiAgICBpZiAoeSA9PT0gdW5kZWZpbmVkKVxyXG4gICAge1xyXG4gICAgICB5ID0gKHggYXMgVmVjdG9yMkQpLnlcclxuICAgICAgeCA9ICh4IGFzIFZlY3RvcjJEKS54XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy54ICs9IHggYXMgbnVtYmVyXHJcbiAgICB0aGlzLnkgKz0geSBhcyBudW1iZXJcclxuXHJcbiAgICByZXR1cm4gdGhpc1xyXG4gIH1cclxuXHJcbiAgbXVsdGlwbHkoeDogbnVtYmVyIHwgVmVjdG9yMkQsIHk6IG51bWJlciB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZCk6IHRoaXNcclxuICB7XHJcbiAgICBpZiAoeSA9PT0gdW5kZWZpbmVkKVxyXG4gICAge1xyXG4gICAgICB5ID0gKHggYXMgVmVjdG9yMkQpLnlcclxuICAgICAgeCA9ICh4IGFzIFZlY3RvcjJEKS54XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy54ICo9IHggYXMgbnVtYmVyXHJcbiAgICB0aGlzLnkgKj0geSBhcyBudW1iZXJcclxuXHJcbiAgICByZXR1cm4gdGhpc1xyXG4gIH1cclxuXHJcbiAgcm90YXRlKHJhZGlhbnM6IG51bWJlcilcclxuICB7XHJcbiAgICBjb25zdCBjb3MgPSBNYXRoLmNvcyhyYWRpYW5zKTtcclxuICAgIGNvbnN0IHNpbiA9IE1hdGguc2luKHJhZGlhbnMpO1xyXG5cclxuICAgIHJldHVybiB0aGlzLnNldChjb3MgKiB0aGlzLnggLSBzaW4gKiB0aGlzLnksIHNpbiAqIHRoaXMueCArIGNvcyAqIHRoaXMueSk7XHJcbiAgfVxyXG5cclxuICBzZXRUb1BvbGFyKGF6aW11dGg6IG51bWJlciwgcmFkaXVzOiBudW1iZXIgPSAxKTogdGhpc1xyXG4gIHtcclxuICAgIHRoaXMueCA9IE1hdGguY29zKGF6aW11dGgpICogcmFkaXVzXHJcbiAgICB0aGlzLnkgPSBNYXRoLnNpbihhemltdXRoKSAqIHJhZGl1c1xyXG5cclxuICAgIHJldHVybiB0aGlzXHJcbiAgfVxyXG59IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiJdLCJuYW1lcyI6WyJjYW52YXMiLCJ0aGlzIiwic2NlbmUiLCJhbmltYXRpb25GcmFtZUlkIiwibGFzdEZyYW1lVGltZSIsIm9uRnJhbWUiLCJiaW5kIiwicmVzaXplIiwic2l6ZSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIndpZHRoIiwiaGVpZ2h0IiwicGxheSIsImNyZWF0ZSIsInRpbWUiLCJkZWx0YSIsInVwZGF0ZSIsInJlbmRlciIsIndpbmRvdyIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInN0b3AiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsIngiLCJ5IiwidmVsb2NpdHkiLCJhY3RpdmUiLCJwb29sZWQiLCJwb3NpdGlvbiIsImdldEJvdW5kaW5nQm94IiwidG9wIiwicmlnaHQiLCJib3R0b20iLCJsZWZ0IiwiY2xvbmUiLCJtdWx0aXBseSIsImFkZCIsInNpemUyIiwiZGVzdHJveUdhbWVPYmplY3QiLCJjb250ZXh0Iiwic2F2ZSIsImZpbGxTdHlsZSIsImJlZ2luUGF0aCIsImFyYyIsImZpbGwiLCJjbG9zZVBhdGgiLCJyZXN0b3JlIiwicG9pbnRlciIsImluIiwidHVyblRvTW91c2UiLCJ0dXJuIiwiYWNjZWxlcmF0ZSIsInNob290IiwiY2hhbmdlZCIsInRhYkluZGV4IiwiZm9jdXMiLCJvbk1vdXNlRG93biIsIm9uTW91c2VFbnRlciIsIm9uTW91c2VMZWF2ZSIsIm9uTW91c2VNb3ZlIiwib25LZXlEb3duIiwib25LZXlVcCIsImFkZEV2ZW50TGlzdGVuZXIiLCJldmVudCIsInByZXZlbnREZWZhdWx0IiwicmVjdCIsInNjYWxlWCIsInNjYWxlWSIsImNsaWVudFgiLCJjbGllbnRZIiwia2V5IiwiZGVzdHJveSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJQSTIiLCJNYXRoIiwiUEkiLCJpbmMiLCJ2YWx1ZSIsImFtb3VudCIsIm1heCIsIm1pbiIsImRlYyIsImNsYW1wIiwid3JhcCIsIkFuZ2xlIiwidG9EZWdyZWVzIiwicmFkaWFucyIsInRvUmFkaWFucyIsImRlZ3JlZXMiLCJiZXR3ZWVuIiwiYSIsImIiLCJhdGFuMiIsInJvdGF0ZVRvIiwiY3VycmVudCIsInRhcmdldCIsImxlcnAiLCJhYnMiLCJmbG9vciIsImZsb2F0QmV0d2VlbiIsInJhbmRvbSIsInBpY2siLCJjaG9pY2VzIiwibGVuZ3RoIiwiYW5nbGUiLCJyb3RhdGlvblNwZWVkIiwicG9pbnRzIiwiciIsInRvdGFsUG9pbnRzIiwiY291bnQiLCJyYWRpdXMiLCJhbmdsZVN0ZXAiLCJpIiwicG9pbnQiLCJjb3MiLCJzaW4iLCJwdXNoIiwicG9pbnRzT25DaXJjbGUiLCJmb3JFYWNoIiwiY3JlYXRlUG9seWdvblBvaW50cyIsIm1vdmVtZW50Iiwic3Ryb2tlU3R5bGUiLCJ0cmFuc2xhdGUiLCJyb3RhdGUiLCJtb3ZlVG8iLCJpbmRleCIsImxpbmVUbyIsInN0cm9rZSIsInNldFRyYW5zZm9ybSIsImNhbGxiYWNrIiwiY2hlY2siLCJhQm94IiwiYkJveCIsIm92ZXJsYXBzIiwiZ2V0Q29udGV4dCIsImlucHV0IiwiZGlzcGxheUxpc3QiLCJzaGlwIiwicm9ja3MiLCJidWxsZXRzIiwicGFydGljYWxzIiwiY29sbGlkZXJzIiwiYWRkR2FtZU9iamVjdCIsIm9iaiIsImJlZm9yZSIsImFmdGVyIiwiaW5kZXhPZiIsInNwbGljZSIsImFkZENvbGxpZGVyIiwiQXJyYXkiLCJpc0FycmF5IiwiY29sbGlkZXIiLCJDb2xsaWRlciIsInJvY2siLCJvblNoaXBDcmFzaCIsIm9uQnVsbGV0SGl0Um9jayIsInR1cm5UbyIsImJyYWtlIiwiZmlyZSIsImJ1bGxldCIsImNsZWFyUmVjdCIsIml0ZW0iLCJmaWxsVGV4dCIsInRvRml4ZWQiLCJzcGVlZCIsIndlYXBvbkNvb2xkb3duIiwiYnVsbGV0SW5kZXgiLCJhUm9jayIsInJvY2tJbmRleCIsIl9hbmdsZSIsIl9zcGVlZCIsImRpcmVjdGlvbiIsInNldFRvUG9sYXIiLCJvayIsInN0YXJzIiwiYWxwaGEiLCJjb2xvciIsInN0YXIiLCJmaWxsUmVjdCIsIlZlY3RvcjJEIiwic2V0IiwidW5kZWZpbmVkIiwiYXppbXV0aCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsImV4cG9ydHMiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImFzdGVyb2lkcyJdLCJzb3VyY2VSb290IjoiIn0=